{
  "hash": "29ac43f43ab754b9ccc61b4fd8cd1548",
  "result": {
    "markdown": "---\nformat: \n  revealjs:\n    css: ../../styles.css\n    slide-number: true\n    show-slide-number: all\n    progress: true\n    history: true\n    hash-type: number\n    theme: default\n    code-block-background: true\n    highlight-style: github\n    code-link: false\n    code-copy: true\n    controls: true\n    pagetitle: \"Inter R4SS Day 1A\"\n    author-meta: \"Jeffrey Girard\"\n    date-meta: \"2023-06-05\"\n---\n\n\n::: {.my-title}\n# [Intermediate R]{.blue2} <br />for Social Scientists\n\n::: {.my-grey}\n[Workshop Day 1A | 2023-06-05]{}<br />\n[Jeffrey M. Girard | Pitt Methods]{}\n:::\n\n![](../../img/proud2_2780E3.svg){.absolute bottom=0 right=0 width=400}\n:::\n\n# Overview\n\n## Instructor {.smaller}\n\n::: {.columns .pv4}\n::: {.column width=\"30%\"}\n::: {.tc}\n![](../../img/Girard_500x500.jpg){.br-100}\n\n**Jeffrey Girard**, PhD<br /> [affcom.ku.edu/girard](https://affcom.ku.edu/girard)<br /> [jmgirard\\@ku.edu](mailto:jmgirard@ku.edu)\n:::\n:::\n\n::: {.column width=\"10%\"}\n:::\n\n::: {.column width=\"60%\"}\n::: {.fragment}\n#### Background\n\n-   [Assistant Professor]{.b .blue}, *University of Kansas*\n-   Research Postdoc, *Carnegie Mellon University*\n-   PhD Student, *University of Pittsburgh*\n:::\n::: {.fragment .mt1}\n#### Research Areas\n\n-   Psychological Assessment\n-   Affective/Interpersonal Communication\n-   Applied [Statistics]{.b .blue} and Machine Learning\n-   [Data Science]{.b .blue} and Software Engineering\n:::\n:::\n:::\n\n## Workshop Goals {.smaller}\n\n::: {.columns .pv4}\n::: {.column width=\"60%\"}\n-   This is an intermediate workshop aimed at social scientists with some prior experience in R\n\n::: {.fragment .mt1}\n-   My goal this week is to teach you practical research skills in R (wrangle, visualize, model)\n:::\n\n::: {.fragment .mt1}\n-   Through [lectures]{.b .blue} and [live coding]{.b .blue}, you will learn fundamental concepts and skills\n:::\n\n::: {.fragment .mt1}\n-   Through hands-on [exercises]{.b .blue}, you will gain confidence in your skills and ability to learn\n:::\n\n::: {.fragment .mt1}\n-   You will need to practice to become a pro!\n:::\n:::\n\n::: {.column .tc .pv5 width=\"40%\"}\n\n{{< li rfldwidq trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}\n\n\n:::\n:::\n\n\n## Workshop Roadmap {.smaller}\n\n::: {.columns .pv4}\n::: {.column width=\"60%\"}\n<table id=\"roadmap\" width=\"100%\">\n  <tr class=\"blue\">\n    <th>DAY 1A</th>\n    <th>DAY 2A</th>\n    <th>DAY 3A</th>\n  </tr>\n  <tr>\n    <td>Overview</td>\n    <td>Summarize</td>\n    <td>Separating</td>\n  </tr>\n  <tr>\n    <td>Quarto</td>\n    <td>Selection</td>\n    <td>Reshaping</td>\n  </tr>\n  <tr>\n    <td>Wrangling</td>\n    <td>Iteration</td>\n    <td>Joining</td>\n  </tr>\n  <tr class=\"blue\">\n    <th style=\"padding-top:1.75rem;\">DAY 1B</th>\n    <th>DAY 2B</th>\n    <th>DAY 3A</th>\n  </tr>\n  <tr>\n    <td>Graphics</td>\n    <td>Customizing</td>\n    <td>Stats: GLM</td>\n  </tr>\n  <tr>\n    <td>Variation</td>\n    <td>Layouts</td>\n    <td>Stats: MLM</td>\n  </tr>\n  <tr>\n    <td>Covariation</td>\n    <td>Exporting</td>\n    <td>Consulting</td>\n  </tr>\n</table>\n:::\n\n::: {.column .tc .pv4 width=\"40%\"}\n\n{{< li xtkehzkm trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}\n\n\n:::\n:::\n\n## Workshop Etiquette {.smaller}\n\n::: {.columns .pv4}\n::: {.column width=\"60%\"}\n#### [Things to Do]{.green}\n\n-   Behave respectfully and with patience\n-   Ask for help in chat or \"raise hand\"\n-   Turn your camera on or off as desired\n-   Come and go from workshop as needed\n\n::: {.fragment .mt1}\n#### [Things Not to Do]{.red}\n\n-   Don't disparage yourself or others\n-   Don't stay confused for too long\n-   Don't unmute yourself when not talking\n-   Don't re-sell the workshop materials\n:::\n:::\n\n::: {.column .tc .pv5 width=\"40%\"}\n\n{{< li syzdvjlt trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}\n\n\n:::\n:::\n\n\n# Refresher\n\n## R, RStudio, and Projects\n\n![](../../img/rstudio_labels.jpg)\n\nKeep all your files together in a project (Files > New Project)\n\n## Communicating with R {.smaller}\n\n::: {.columns .pv4}\n::: {.column width=\"60%\"}\n-   The [Console]{.b .blue} is like a [chat window]{.b .green} with R\n    -   You send a command to R and get a response\n    -   Neither side of the conversation is saved\n\n::: {.fragment .mt1}\n-   An [R Script]{.b .blue} is like an [email thread]{.b .green} with R\n    -   You send many commands to R all at once\n    -   Only your side of the conversation is saved\n:::\n\n::: {.fragment .mt1}\n-   A [Quarto Document]{.b .blue} is like a [scrapbook]{.b .green} with R\n    -   You can combine code and formatted text\n    -   Both sides of the conversation are saved\n:::\n:::\n\n::: {.column .tc .pv5 width=\"40%\"}\n\n{{< li zpxybbhl trigger=loop delay=5000 colors=secondary:#2a76dd class=rc >}}\n\n\n:::\n:::\n\n## Assignment and Naming\n\n- Create named objects in R using `<-`\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\nx <- 10\nx - 2 * 3 / 4 ^ 5\n## [1] 9.994141\n```\n:::\n\n\n::: {.fragment .mt2}\n- Object names have some rules in R\n    -   Can only contain letters, digits, `_`s, and `.`s\n    -   The first character must be a letter or a `.`\n:::\n\n## Functions and Packages\n\n- Use functions to perform operations\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\ny <- round(2/3, digits = 3)\ny\n## [1] 0.667\n```\n:::\n\n\n::: {.fragment .mt2}\n- Install and load packages to add features\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n# install.packages(\"praise\")\nlibrary(praise)\npraise()\n## [1] \"You are incredible!\"\n```\n:::\n\n:::\n\n## Strings and Vectors\n\n- Store text data in strings by wrapping it in quotation marks\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\naddress <- \"1600 Pennsylvania Avenue NW, Suite #100\"\naddress\n## [1] \"1600 Pennsylvania Avenue NW, Suite #100\"\n```\n:::\n\n\n::: {.fragment .mt1}\n- Collect multiple similar objects into a vector with `c()`\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\ntemps <- c(70.1, 84.5, 79.0, 69.7, 85.7)\ntemps\n## [1] 70.1 84.5 79.0 69.7 85.7\n```\n:::\n\n\n::: {.fragment .mt2}\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\nnations <- c(\"US\", \"UK\", \"FR\", \"CH\", \"DE\")\nnations\n## [1] \"US\" \"UK\" \"FR\" \"CH\" \"DE\"\n```\n:::\n\n:::\n:::\n\n## Factors\n\n- Store categorical data in factors using `factor()`\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\ncondition_codes <- c(1, 1, 2, 2, 3, 3)\ncondition_codes\n## [1] 1 1 2 2 3 3\n```\n:::\n\n\n::: {.fragment .mt2}\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\ncondition <- factor(\n  condition_codes,\n  levels = c(1, 2, 3),\n  labels = c(\"Waitlist\", \"Placebo\", \"Drug\")\n)\ncondition\n## [1] Waitlist Waitlist Placebo  Placebo  Drug     Drug    \n## Levels: Waitlist Placebo Drug\n```\n:::\n\n:::\n\n## Tibbles\n\n- Tibbles/data frames store tidy, rectangular data in R\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\nlibrary(palmerpenguins)\npenguins\n## # A tibble: 344 × 8\n##    species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n##    <fct>   <fct>              <dbl>         <dbl>             <int>       <int>\n##  1 Adelie  Torgersen           39.1          18.7               181        3750\n##  2 Adelie  Torgersen           39.5          17.4               186        3800\n##  3 Adelie  Torgersen           40.3          18                 195        3250\n##  4 Adelie  Torgersen           NA            NA                  NA          NA\n##  5 Adelie  Torgersen           36.7          19.3               193        3450\n##  6 Adelie  Torgersen           39.3          20.6               190        3650\n##  7 Adelie  Torgersen           38.9          17.8               181        3625\n##  8 Adelie  Torgersen           39.2          19.6               195        4675\n##  9 Adelie  Torgersen           34.1          18.1               193        3475\n## 10 Adelie  Torgersen           42            20.2               190        4250\n## # ℹ 334 more rows\n## # ℹ 2 more variables: sex <fct>, year <int>\n```\n:::\n\n\n## Data Files\n\n- We can also import a data file (e.g., CSV) into R as a tibble\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\nlibrary(tidyverse)\ncereal <- read_csv(\"cereal.csv\")\ncereal\n## # A tibble: 77 × 8\n##    name                      mfr       type  calories sodium carbo sugars rating\n##    <chr>                     <chr>     <chr>    <dbl>  <dbl> <dbl>  <dbl>  <dbl>\n##  1 100% Bran                 Nabisco   cold        70    130   5        6   68.4\n##  2 100% Natural Bran         Quaker O… cold       120     15   8        8   34.0\n##  3 All-Bran                  Kelloggs  cold        70    260   7        5   59.4\n##  4 All-Bran with Extra Fiber Kelloggs  cold        50    140   8        0   93.7\n##  5 Almond Delight            Ralston … cold       110    200  14        8   34.4\n##  6 Apple Cinnamon Cheerios   General … cold       110    180  10.5     10   29.5\n##  7 Apple Jacks               Kelloggs  cold       110    125  11       14   33.2\n##  8 Basic 4                   General … cold       130    210  18        8   37.0\n##  9 Bran Chex                 Ralston … cold        90    200  15        6   49.1\n## 10 Bran Flakes               Post      cold        90    210  13        5   53.3\n## # ℹ 67 more rows\n```\n:::\n\n\n# Quarto\n\n## Quarto\n\n::: {.columns .pv4}\n::: {.column width=\"60%\"}\n-   [Quarto](https://www.quarto.org) creates dynamic content that combines code, output, and markdown (i.e., formatted text)\n\n::: {.fragment}\n-   Create articles, reports, posters, slideshows, websites, blogs, and books in many different formats\n:::\n\n::: {.fragment}\n-   Include equations, citations, crossrefs, figure panels, callouts, advanced layouts, and more!\n:::\n:::\n\n::: {.column .tc .pv5 width=\"40%\"}\n\n{{< li cykiczdp trigger=loop delay=5000 colors=secondary:#2a76dd class=rc >}}\n\n\n:::\n:::\n\n\n## Quarto Live Coding\n\n::: {.instructions}\n    # Create an Quarto Document\n    - Open the \"File\" menu in RStudio\n    - Select the \"New File\" option\n    - Select the \"Quarto Document...\" option\n    - Keep the defaults (HTML) and hit \"Create\"\n    - Open the \"File\" menu\n    - Select the \"Save\" option\n    - Note that it defaults to the project folder\n    - Give it a name like \"Day 1 Notes\" (or whatever)\n    - Note that the file extension is .qmd\n\n    # Render the boilerplate content\n    - To see how it works, read the boilerplate content\n    - Now click the \"Render\" button to create the output file\n    - A preview of the output will appear in the Viewer tab\n    - In the File tab, we see a new .html file was created\n    - We can share this .html file with others\n    - It includes all the formatted text, code, and R results\n\n    # Remove the boilerplate content\n    - The top part of the document is called the \"Header\"\n    - You can change the title but keep it in quotes\n    - Highlight and delete everything below the header\n    - You can delete the header too, but I find it useful\n    \n    # Add an R Chunk\n    - Option 1: Click the green box with C and a plus sign icon (top-right)\n    - Option 2: Ctrl+Alt+I (Win) or Cmd+Option+I (Mac)\n    - Option 3: Type out ```{r} then new line and ``` yourself\n    \n    # Adding code to the chunk\n    - Anything you put inside the \"fences\" (i.e., ```) will be treated as R code\n    - The chunk operates like a mini console\n    - Try doing some calculations in the chunk and hit the green arrow\n    - The answer appears right below the chunk!\n    - If we save and render the document, it appears in the output too\n:::\n\n## Markdown\n\n::: {.columns .pv4}\n::: {.column width=\"60%\"}\n-   [Markdown](https://quarto.org/docs/authoring/markdown-basics.html) is a simple text-to-HTML conversion language used by Quarto, GitHub, Obsidian, etc.\n\n::: {.fragment}\n-   It will allow us to add formatted text, images, links, lists, etc. to our Quarto documents\n:::\n\n::: {.fragment}\n-   Quarto will treat all text that is not in a code chunk as markdown\n:::\n\n:::\n\n::: {.column .tc .pv5 width=\"40%\"}\n\n{{< li zcuiyuld trigger=loop delay=5000 colors=secondary:#2a76dd class=rc >}}\n\n\n:::\n:::\n\n## Markdown Live Coding\n\n::: {.instructions}\n    # Formatting\n    - *italics* and **bold** and ***italics and bold***\n    - superscript^2^ and subscript~2~\n    - ~~strikethrough~~\n    - `verbatim code`\n    \n    # Headings\n    - # Header 1\n    - ## Header 2\n    - ### Header 3\n    \n    # Links\n    - <https://quarto.org>\n    - [Quarto](https://quarto.org)\n    \n    # Images\n    - ![Caption](https://quarto.org/docs/authoring/elephant.png)\n    \n    # Lists\n    - * Unordered list\n    -   + sub-item\n    -   + sub-item\n    - 1. Ordered list\n    - 2. Item 2\n:::\n\n# Basic Data Wrangling\n\n## Basic data wrangling verbs {.smaller}\n\n::: {.columns .pv4}\n::: {.column width=\"60%\"}\n-   [tidyverse]{.b .blue} provides tools for wrangling tibbles\n    -   These functions are named after *verbs*\n    -   So if you name your objects after *nouns*...\n    -   ...your code becomes easier to read\n\n::: {.fragment .mt1}\n| Noun(noun) ❌        |  Verb(noun)  ✔️  | \n|:----------------------|:----------------|\n| `blender(fruit)`      | `blend(fruit)`  |\n| `screwdriver(screw)`  | `drive(screw)`  |\n| `boxcutter(box)`      | `cut(box)`      |\n\n:::\n:::\n\n::: {.column .tc .pv5 width=\"40%\"}\n\n{{< li sbiheqdr trigger=loop delay=5000 colors=secondary:#2a76dd class=rc >}}\n\n\n:::\n:::\n\n## Wrangling columns\n\n::: {.columns .pv4}\n::: {.column width=\"60%\"}\n-   [Select]{.b .blue} retains only certain columns in a tibble (and can reorder them)\n    - [`select(X, KEEP, -DROP)`]{.f80}\n\n::: {.fragment .mt1}\n-   [Mutate]{.b .blue} transforms columns in a tibble or adds new columns to it\n    - [`mutate(X, NEW = OLD / 5)`]{.f80}\n:::\n:::\n\n::: {.column .tc .pv5 width=\"40%\"}\n\n{{< li ifxlrnhk trigger=loop delay=5000 colors=secondary:#2a76dd class=rc >}}\n\n\n:::\n:::\n\n\n## *Select* Live Coding\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n# SETUP: Load package and inspect example tibble\n\nlibrary(tidyverse) # includes the dplyr package\nstarwars\n\n# ==============================================================================\n\n# USECASE: Retain only the specified variables\n\nsw <- select(starwars, name)\nsw\nsw <- select(starwars, name, sex, species)\nsw\n\n# ==============================================================================\n\n# PITFALL: Don't forget to save the change with assignment\n\nselect(starwars, name, sex, species)\nstarwars # still includes all variables\n\n# ==============================================================================\n\n# USECASE: Retain all variables between two variables\n\nsw <- select(starwars, name, hair_color:eye_color)\nsw\n\n# ==============================================================================\n\n# USECASE: Retain all variables except the specified ones\n\nsw <- select(starwars, -sex, -species)\nsw\nsw <- select(starwars, -c(sex, species))\nsw\nsw <- select(starwars, -c(hair_color:starships))\nsw\n```\n:::\n\n\n\n## *Mutate* Live Coding\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n# SETUP: Create example tibble\n\npatients <- tibble(\n  id = c(\"S1\", \"S2\", \"S3\"),\n  feet = c(6, 5, 5),\n  inches = c(1, 7, 2),\n  pounds = c(176.3, 124.9, 162.6)\n)\npatients\n\n# ==============================================================================\n\n# USECASE: Add one or more variables\n\np2 <- mutate(patients, sex = c(\"M\", \"F\", \"F\"))\np2\n\nages <- c(32, 41, 29)\np2 <- mutate(patients, ages = ages)\np2\n\np2 <- mutate(\n  patients, \n  sex = c(\"M\", \"F\", \"F\"), \n  ages = ages\n)\np2\n\n# ==============================================================================\n\n# USECASE: Compute variables\n\np2 <- mutate(patients, height = feet + inches / 12)\np2\n\np2 <- mutate(patients, ln_pounds = log(pounds))\np2\n\n# ==============================================================================\n\n# USECASE: Overwrite variables\n\npatients <- mutate(patients, height = height / 3.281)\npatients\n\n# ==============================================================================\n\n# USECASE: Duplicate variables\n\np2 <- mutate(patients, weight = pounds)\np2 # both weight and pounds exist\n```\n:::\n\n\n\n## Wrangling rows\n\n::: {.columns .pv4}\n::: {.column width=\"60%\"}\n-   [Arrange]{.b .blue} sorts the rows in a tibble based on their values\n    -   [`arrange(X, VAR_SORT_UP)`]{.f80}\n\n::: {.fragment .mt1}\n-   [Filter]{.b .blue} retains only certain rows in a tibble based on criteria\n    -   [`filter(X, NUMBER > 0)`]{.f80}\n    -   [`filter(X, STRING == \"A\")`]{.f80}\n:::\n\n:::\n\n::: {.column .tc .pv5 width=\"40%\"}\n\n{{< li dlprbpnx trigger=loop delay=5000 colors=secondary:#2a76dd class=rc >}}\n\n\n:::\n:::\n\n\n## *Arrange* Live Coding\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n# USECASE: Sort observations by a variable\n\nstarwars\n\nsw <- arrange(starwars, height)\nsw # sorted by height, ascending\n\nsw <- arrange(starwars, name)\nsw # sorted by name, alphabetically\n\n# ==============================================================================\n\n# USECASE: Sort observations by a variable, in reverse order\n\nsw <- arrange(starwars, desc(height))\nsw # sorted by height, descending\n\nsw <- arrange(starwars, desc(name))\nsw # sorted by name, reverse-alphabetically\n\n# ==============================================================================\n\n# USECASE: Sort observations by multiple variables\n\nsw <- arrange(starwars, hair_color, mass)\nsw # sorted by hair_color, then ties broken by mass\n```\n:::\n\n\n\n## *Filter* Live Coding\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n# USECASE: Retain only observations that meet a criterion\n\nsw <- filter(starwars, mass > 100)\nsw # only observations with mass greater than 100\n\nsw <- filter(starwars, mass <= 100)\nsw # only observations with mass less than or equal to 100\n\nsw <- filter(starwars, species == \"Human\")\nsw # only observations with species equal to Human\n\nsw <- filter(starwars, species != \"Human\")\nsw # only observations with species not equal to Human\n\n# ==============================================================================\n\n# PITFALL: Don't try to use a single = for testing equality\n\nsw <- filter(starwars, height = 150) # error\n\nsw <- filter(starwars, height == 150) # correct\nsw \n\n# ==============================================================================\n\n# PITFALL: Don't forget that R is case-sensitive\n\nsw <- filter(starwars, species == \"human\")\nsw # no observations left (because it should be Human)\n\n# ==============================================================================\n\n# USECASE: Retain only observations that meet complex criteria\n\nsw <- filter(starwars, mass > 100 & height > 200)\nsw # only observations with mass over 100 AND height over 200\n\nsw <- filter(starwars, height < 100 | hair_color == \"none\")\nsw # only observations with height under 100 OR hair_color equal to none\n\n# ==============================================================================\n\n# PITFALL: Don't forget to complete both conditions\n\nsw <- filter(starwars, mass > 100 & < 200) # error\n\nsw <- filter(starwars, mass > 100 & mass < 200) # correct\nsw\n\n# ==============================================================================\n\n# PITFALL: Don't try to equate a string to a vector\n\nsw <- filter(starwars, species == c(\"Human\", \"Droid\")) # error\n\nsw <- filter(starwars, species %in% c(\"Human\", \"Droid\")) # correct\nsw\n```\n:::\n\n\n\n## *Filter* Cheatsheet {.smaller}\n\n::: {.columns .pv4}\n::: {.column width=\"60%\" .mytable}\n\n| Symbol | Description            | Num | Chr   |\n|--------|------------------------|-----|-------|\n| `<`    | Less than              | Yes | *No*  |\n| `<=`   | Less than or equal to  | Yes | *No*  |\n| `>`    | More than              | Yes | *No*  |\n| `>=`   | More than or equal to  | Yes | *No*  |\n| `==`   | Equal to               | Yes | Yes   |\n| `!=`   | Not equal to           | Yes | Yes   |\n| `%in%` | Found in               | Yes | Yes   |\n| `&`    | Logical And            | Yes | Yes   |\n| `|`    | Logical Or             | Yes | Yes   |\n\n:::\n\n::: {.column .tc .pv5 width=\"40%\"}\n\n{{< li esixrdij trigger=loop delay=5000 colors=secondary:#2a76dd class=rc >}}\n\n\n:::\n:::\n\n# Pipes and Pipelines\n\n## Pipes and Pipelines {.smaller}\n\n::: {.columns .pv4}\n::: {.column width=\"60%\"}\n- How can we do [multiple operations]{.b .green} to an object?\n    1. `x <- 10`\n    2. `x2 <- sqrt(x)`\n    3. `x3 <- round(x2)`\n    \n::: {.fragment .mt1}\n- This works but is **cumbersome** and **error-prone**\n:::\n\n::: {.fragment .mt1}\n- A better approach is to use [pipes]{.b .blue} and [pipelines]{.b .green}\n    - `x3 <- 10 |> sqrt() |> round()`\n:::\n\n::: {.fragment .mt1}\n- I like to read `|>` as \"and then...\"\n    - \"Take 10 and then sqrt() and then round()\"\n:::\n    \n:::\n\n::: {.column .tc .pv5 width=\"40%\"}\n\n{{< li mhttdvjl trigger=loop delay=5000 colors=secondary:#2a76dd class=rc >}}\n\n\n:::\n:::\n\n\n## Pipes Live Coding\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n# SETUP: Enable the pipe operator shortcut\n\n# Tools > Global Options... > Code tab > Check \"Use Native Pipe Operator\"\n\n# Type out |> or press Ctrl+Shift+M (Win) / Cmd+Shift+M (Mac)\n\n# ==============================================================================\n\n# LESSON: The pipe pushes objects to a function as its first argument\n\n# TEMPLATE: x |> function_name() is the same as function_name(x)\n\nx <- 10\n\ny <- sqrt(x)\ny\n\ny <- x |> sqrt()\ny\n\n# ==============================================================================\n\n# PITFALL: Don't forget to remove the object from the function call\n\nx |> sqrt(x) # wrong\n\nx |> sqrt() # correct\n\n# ==============================================================================\n\n# USECASE: You can still use arguments when piping\n\nz <- round(3.14, digits = 1)\nz\n\nz <- 3.14 |> round(digits = 1)\nz\n\n# ==============================================================================\n\n# USECASE: Pipes are useful with tibbles and wrangling verbs\n\nstarwars\n\nsw <- select(starwars, name, species, height)\nsw\n\nsw <- starwars |> select(name, species, height)\nsw\n\n# ==============================================================================\n\n# PITFALL: Don't add a pipe without a step after it\n\nsw <- starwars |> select(name, species, height) |> # error\n```\n:::\n\n\n\n## Pipelines Live Coding\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n# USECASE: You can chain multiple pipes together to make a pipeline\n\nx <- 10 |> sqrt() |> round()\nx\n\n# ==============================================================================\n\n# TIP: If you want to see the output of a pipeline, you can pipe to print()\n\nx <- 10 |> sqrt() |> round() |> print()\n\n# ==============================================================================\n\n# TIP: To make your pipelines more readable, move each step to a new line\n\nx <- \n  10 |> \n  sqrt() |> \n  round() |>\n  print()\n\n# ==============================================================================\n\n# PITFALL: Don't put the pipe at the beginning of a line, though\n\nx <- \n  10 \n  |> sqrt()\n  |> round()\n  |> print() # error\n\n# ==============================================================================\n\n# USECASE: Chain together a series of verbs to flexibly wrangle data\n\ntallones <- \n  starwars |> \n  select(name, species, height) |> \n  mutate(height_ft = height / 30.48) |>  \n  filter(height_ft > 7) |> \n  arrange(desc(height_ft)) |>  \n  print()\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\r\n<script>\r\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\r\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\r\n  // slide changes (different for each slide format).\r\n  (function () {\r\n    // dispatch for htmlwidgets\r\n    function fireSlideEnter() {\r\n      const event = window.document.createEvent(\"Event\");\r\n      event.initEvent(\"slideenter\", true, true);\r\n      window.document.dispatchEvent(event);\r\n    }\r\n\r\n    function fireSlideChanged(previousSlide, currentSlide) {\r\n      fireSlideEnter();\r\n\r\n      // dispatch for shiny\r\n      if (window.jQuery) {\r\n        if (previousSlide) {\r\n          window.jQuery(previousSlide).trigger(\"hidden\");\r\n        }\r\n        if (currentSlide) {\r\n          window.jQuery(currentSlide).trigger(\"shown\");\r\n        }\r\n      }\r\n    }\r\n\r\n    // hookup for slidy\r\n    if (window.w3c_slidy) {\r\n      window.w3c_slidy.add_observer(function (slide_num) {\r\n        // slide_num starts at position 1\r\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\r\n      });\r\n    }\r\n\r\n  })();\r\n</script>\r\n\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}