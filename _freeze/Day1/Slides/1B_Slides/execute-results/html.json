{
  "hash": "ed40ef91e20adaf226df6d8d33b2cbeb",
  "result": {
    "markdown": "---\nformat: \n  revealjs:\n    css: ../../styles.css\n    slide-number: true\n    show-slide-number: all\n    progress: true\n    history: true\n    hash-type: number\n    theme: default\n    code-block-background: true\n    highlight-style: github\n    code-link: false\n    code-copy: true\n    controls: true\n    pagetitle: \"Inter R4SS Day 1B\"\n    author-meta: \"Jeffrey Girard\"\n    date-meta: \"2023-06-05\"\n---\n\n\n\n::: {.my-title}\n# [Intermediate R]{.blue2} <br />for Social Scientists\n\n::: {.my-grey}\n[Workshop Day 1B | 2023-06-05]{}<br />\n[Jeffrey M. Girard | Pitt Methods]{}\n:::\n\n![](../../img/proud2_2780E3.svg){.absolute bottom=0 right=0 width=400}\n:::\n\n# Principles\n\n## What is a graphic? {.smaller}\n\n::: {.pv4 .tc}\n![](../../img/graphics.png)\n\n::: {.fragment}\nA [data visualization]{.b .blue} expresses [data]{.b .green} through [visual aesthetics]{.b .green}.\n:::\n:::\n\n\n## Describing Graphics {.smaller}\n\n::: {.pv4 .tc}\n\n\n\n::: {.cell layout-ncol=\"2\"}\n::: {.cell-output-display}\n![](1B_Slides_files/figure-html/graphics1-1.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](1B_Slides_files/figure-html/graphics1-2.png){width=672}\n:::\n:::\n\n\n\n::: {.fragment}\nSome simple graphics are [easy to describe]{.b .green} and may even have [ready names]{.b .blue}.\n:::\n:::\n\n\n## Describing Graphics {.smaller}\n\n::: {.pv4 .tc}\n\n\n\n::: {.cell layout-ncol=\"2\"}\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n```\n:::\n\n::: {.cell-output-display}\n![](1B_Slides_files/figure-html/graphics2-1.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](1B_Slides_files/figure-html/graphics2-2.png){width=672}\n:::\n:::\n\n\n\n::: {.fragment}\nA [grammar of graphics]{.b .blue} will help us describe more [complex]{.b .green} graphics.\n:::\n:::\n\n\n## The Grammar of Graphics {.smaller}\n\n::: {.columns .pv4}\n::: {.column width=\"60%\"}\n-   The [grammar of graphics]{.b .blue} is a set of rules for [describing]{.b .green} and [creating]{.b .green} data visualizations\n\n::: {.fragment .mt1}\n-   To make our data visual (and therefore put our highly evolved occipital lobes to work)...\n    -   We connect [variables]{.b .blue} to [visual qualities]{.b .green}\n    -   We represent [observations]{.b .blue} as [visual objects]{.b .green}\n:::\n\n::: {.fragment .mt1}\n-   This requires four *fundamental* elements\n    -   We will first learn about them in lecture\n    -   We will then apply them in R using \\{ggplot2\\}\n:::\n:::\n\n::: {.column .tc .pv5 width=\"40%\"}\n\n\n{{< li ksoxpinm trigger=loop delay=5000 colors=secondary:#2a76dd class=rc >}}\n\n\n\n\n:::\n:::\n\n\n## Data {.smaller}\n\n::: {.tc .tibbledisp}\n\n\n\n::: {.cell rows.print='6'}\n\n```{.r .cell-code}\nmpg\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 234 × 11\n   manufacturer model      displ  year   cyl trans drv     cty   hwy fl    class\n   <chr>        <chr>      <dbl> <int> <int> <chr> <chr> <int> <int> <chr> <chr>\n 1 audi         a4           1.8  1999     4 auto… f        18    29 p     comp…\n 2 audi         a4           1.8  1999     4 manu… f        21    29 p     comp…\n 3 audi         a4           2    2008     4 manu… f        20    31 p     comp…\n 4 audi         a4           2    2008     4 auto… f        21    30 p     comp…\n 5 audi         a4           2.8  1999     6 auto… f        16    26 p     comp…\n 6 audi         a4           2.8  1999     6 manu… f        18    26 p     comp…\n 7 audi         a4           3.1  2008     6 auto… f        18    27 p     comp…\n 8 audi         a4 quattro   1.8  1999     4 manu… 4        18    26 p     comp…\n 9 audi         a4 quattro   1.8  1999     4 auto… 4        16    25 p     comp…\n10 audi         a4 quattro   2    2008     4 manu… 4        20    28 p     comp…\n# ℹ 224 more rows\n```\n:::\n:::\n\n\n\n::: {.fragment .mt1}\nGraphics require [data]{.b .blue} (e.g., tibbles), which describe [observations]{.b .green} using [variables]{.b .green}.\n:::\n:::\n\n\n## Aesthetic Mappings {.smaller}\n\n::: {.pv4 .tc}\n\n![](../../img/aes.png)\n\n::: {.fragment}\nGraphics require [aesthetic mappings]{.b .blue}, which connect [data variables]{.b .green} to [visual qualities]{.b .green}.\n:::\n:::\n\n\n## Scales {.smaller}\n\n::: {.pv4 .tc}\n\n::: {layout-ncol=2}\n![](../../img/position.png)\n\n![](../../img/otherscale.png)\n:::\n\n::: {.fragment .mt1}\nGraphics require [scales]{.b .blue}, which connect specific [data *values*]{.b .green} to specific [aesthetic *values*]{.b .green}.\n:::\n:::\n\n\n## Geometric Objects {.smaller}\n\n::: {.pv4 .tc}\n\n\n\n::: {.cell layout-ncol=\"2\"}\n::: {.cell-output-display}\n![](1B_Slides_files/figure-html/geoms-1.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](1B_Slides_files/figure-html/geoms-2.png){width=672}\n:::\n:::\n\n\n\n::: {.fragment .mt1}\nGraphics require [geometric objects]{.b .blue} (geoms), which [represent the observations]{.b .green}.\n:::\n:::\n\n\n# Scatterplots\n\n## ggplot2 Basics {.smaller}\n\n::: {.columns .pv4}\n::: {.column width=\"60%\"}\n-   The [ggplot2]{.b .blue} package is a part of tidyverse\n    -   No need to install or load it separately\n    -   It plays nicely with tibbles and wrangling\n\n::: {.fragment .mt1}\n-   It implements the [grammar of graphics]{.b .green} in R\n    -   The \"gg\" stands for \"grammar of graphics\"\n    -   Thus, it lets us control all four elements\n:::\n\n::: {.fragment .mt1}\n-   We will create a [pseudo-pipeline]{.b .green} of commands\n    -   However, we will use `+` rather than `|>`\n    -   This is because \\{ggplot2\\} predates the R pipe\n:::\n:::\n\n::: {.column .tc .pv5 width=\"40%\"}\n\n\n{{< li gkeohday trigger=loop delay=5000 colors=secondary:#2a76dd class=rc >}}\n\n\n\n\n:::\n:::\n\n\n## ggplot2 Live Coding\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n# SETUP: We will need tidyverse and an example dataset\n\nlibrary(tidyverse)\n\nmpg\n\n# ==============================================================================\n\n# LESSON: First, set the data to a tibble\np <- ggplot(data = mpg)\np\n\n# ==============================================================================\n\n# LESSON: Next, set the aesthetic mappings with aes()\n\np <- ggplot(data = mpg, mapping = aes(x = displ, y = hwy))\np\n\n# ==============================================================================\n\n# TIP: You can leave off the optional argument names\n\np <- ggplot(mpg, aes(x = displ, y = hwy))\np\n\n# ==============================================================================\n\n# LESSON: Finally, add a point geom\n\np <- \n  ggplot(mpg, aes(x = displ, y = hwy)) + \n  geom_point()\np\n\n# ==============================================================================\n\n# LESSON: We can use arguments to customize the geom\n\np <- \n  ggplot(mpg, aes(x = displ, y = hwy)) + \n  geom_point(color = \"grey40\", shape = \"square\", size = 2)\np\n\n# ==============================================================================\n\n# LESSON: We now have a simple scatterplot but can add more geom layers\n\np <- \n  ggplot(mpg, aes(x = displ, y = hwy)) + \n  geom_point(color = \"grey40\", shape = \"square\", size = 2) +\n  geom_smooth()\np\n\n# ==============================================================================\n\n# LESSON: We now have a simple scatterplot but can add more geom layers\n\np <- \n  ggplot(mpg, aes(x = displ, y = hwy)) + \n  geom_point(color = \"grey40\", shape = \"square\", size = 2) +\n  geom_smooth(color = \"red\", linetype = \"dashed\", linewidth = 1)\np\n```\n:::\n\n\n\n\n# Aesthetics\n\n## Aesthetics {.smaller}\n\n::: {.columns .pv4}\n::: {.column width=\"60%\"}\n-   [Aesthetics]{.b .blue} control a geom's appearance\n    -   points: *color, shape, size, ...*\n    -   smooths: *color, linetype, linewidth, ...*\n\n::: {.fragment .mt1}\n-   There are two ways to control aesthetics:\n    -   You can [set it]{.b .blue} to a [value]{.b .green}\n        -   It will take on *one* value only\n        -   e.g., all points = red\n    -   You can [map it]{.b .blue} to a [variable]{.b .green}\n        -   It will take on *different* values\n        -   e.g., sedans = red, trucks = blue\n\n:::\n\n:::\n\n::: {.column .tc .pv5 width=\"40%\"}\n\n\n{{< li fiivuxdi trigger=loop delay=5000 colors=secondary:#2a76dd class=rc >}}\n\n\n\n\n:::\n:::\n\n\n## Aesthetics Live Coding\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n# SETUP: We will need tidyverse and an example dataset\n\nlibrary(tidyverse)\n\nmpg\n\n# ==============================================================================\n\n# LESSON: Set the color aesthetic to a value\n\np <- \n  ggplot(mpg, aes(x = displ, y = hwy)) + \n  geom_point(color = \"blue\")\np\n\n# ==============================================================================\n\n# LESSON: Map the color aesthetic to a variable to learn more relationships\n\np <- \n  ggplot(mpg, aes(x = displ, y = hwy, color = class)) + \n  geom_point()\np\n\n# ==============================================================================\n\n# PITFALL: Be sure to set aesthetics inside of geom() not aes()\n\np <- ggplot(mpg, aes(x = displ, y = hwy, color = \"blue\")) + \n  geom_point() #unintended\np\n\n# ==============================================================================\n\n# PITFALL: If you both set and map an aesthetic, the setting will win out\n\nggplot(mpg, aes(x = displ, y = hwy, color = drv)) + \n  geom_point(color = \"blue\") \n\n# ==============================================================================\n\n# LESSON: This works the same for other aesthetics\n\nggplot(mpg, aes(x = displ, y = hwy, shape = drv)) + \n  geom_point() \n\n# ==============================================================================\n\n# TIP: I like to use redundant aesthetics (e.g., in case color can't be seen)\n\nggplot(mpg, aes(x = displ, y = hwy, color = drv, shape = drv)) + \n  geom_point() \n\n# ==============================================================================\n\n# LESSON: Some geoms will be \"grouped\" if you map to a categorical variable\n\nggplot(mpg, aes(x = displ, y = hwy, color = drv, shape = drv)) + \n  geom_point() +\n  geom_smooth()\n\n# NOTE: We now have a separate smooth line for each drv category\n# NOTE: The shape aesthetic does not apply to smooth geoms so was ignored there\n```\n:::\n\n\n\n# Variation\n\n## Variation {.smaller}\n\n::: {.columns .pv4}\n::: {.column width=\"60%\"}\n-   [Variable distributions]{.b .blue} are critical in data analysis\n    -   What are the most and least [common values]{.b .green}?\n    -   What are the [extrema]{.b .green} (min and max values)?\n    -   Are there any [outliers]{.b .green} or impossible values?\n    -   How much [spread]{.b .green} is there in the variable?\n    -   What [shape]{.b .green} does the distribution take?\n\n::: {.fragment .mt1}\n-   Visualization helps us to understand [variation]{.b .blue}\n    -   It can also [communicate]{.b .green} it to others\n:::\n:::\n\n::: {.column .tc .pv5 width=\"40%\"}\n\n\n{{< li wovwohsm trigger=loop delay=5000 colors=secondary:#2a76dd class=rc >}}\n\n\n\n\n:::\n:::\n\n## Variation Live Coding\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n# SETUP: We will need tidyverse and an example dataset\n\nlibrary(tidyverse)\n\nsalaries <- read_csv(\"salaries.csv\")\n\n# ==============================================================================\n\n# USECASE: Create bar plots to count discrete variable frequency\n\nggplot(salaries, aes(x = sex)) + geom_bar()\n\nggplot(salaries, aes(x = rank)) + geom_bar()\n\nggplot(salaries, aes(x = discipline)) + geom_bar()\n\nggplot(salaries, aes(y = discipline)) + geom_bar()\n\n# ==============================================================================\n\n# PITFALL: Don't try to create a bar plot for a continuous variable\n\nggplot(salaries, aes(x = salary)) + geom_bar() # not what we wanted\n\n# ==============================================================================\n\n# USECASE: Instead create histograms to count continuous variable bin frequency\n\nggplot(salaries, aes(x = salary)) + geom_histogram() # better\n\nggplot(salaries, aes(x = salary)) + \n  geom_histogram(bins = 20)\n\nggplot(salaries, aes(x = salary)) + \n  geom_histogram(binwidth = 2)\n\nggplot(salaries, aes(x = salary)) + \n  geom_histogram(binwidth = 2, color = \"red\", linewidth = 1)\n\nggplot(salaries, aes(x = salary)) + \n  geom_histogram(binwidth = 2, color = \"red\", linewidth = 1, fill = \"white\")\n# ==============================================================================\n\n# PITFALL: Don't try to create histograms for categorical variables\n\nggplot(salaries, aes(x = rank)) + geom_histogram() #error\n\n# ==============================================================================\n\n# USECASE: Or create density plots or boxplots\n\nggplot(salaries, aes(x = salary)) + geom_density()\n# Higher density means relatively more common\n\nggplot(salaries, aes(x = salary)) + \n  geom_density(color = \"red\", linewidth = 1, fill = \"white\")\n\nggplot(salaries, aes(x = salary)) + geom_boxplot()\n# The box goes from 25th to 75th percentile\n# The thick line inside the box is the 50th percentile (median)\n# The whisker lines outside the box show non-outlier points\n# The dots outside the whisker lines show outlier points\n```\n:::\n\n\n\n\n# Covariation\n\n## Covariation {.smaller}\n\n::: {.columns .pv4}\n::: {.column width=\"60%\"}\n-   We are often interested in [covariation]{.b .blue}\n    -   Does variation in X go with variation in Y?\n    -   Do higher X scores go with higher Y scores?\n    -   Do groups differ on Y score distributions?\n    -   Do certain groups tend to go together?\n\n::: {.fragment .mt1}\n-   We can extend variation geoms into covariation\n    -   The geoms we use will heavily depend on...\n    -   ...are the variables [continuous]{.b .green} or [discrete]{.b .green}?\n:::\n:::\n\n::: {.column .tc .pv5 width=\"40%\"}\n\n\n{{< li fjeqvghr trigger=loop delay=5000 colors=secondary:#2a76dd class=rc >}}\n\n\n\n\n:::\n:::\n\n## Covariation Live Coding\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\nsalaries <- read_csv(\"salaries.csv\")\n\n# Continuous-by-continuous = Scatterplot\nggplot(salaries, aes(x = years_since_phd, y = salary)) + geom_point()\n\n\n# Continuous-by-discrete = Boxplots\nggplot(salaries, aes(x = rank, y = salary)) + geom_point() # not great\n\nggplot(salaries, aes(x = rank, y = salary)) + geom_boxplot() # better\n\nggplot(salaries, aes(x = salary, y = rank)) + geom_boxplot() # better\n\n\n# Continuous-by-discrete = Violin\n\nggplot(salaries, aes(x = salary, y = rank)) + geom_violin() # better\n\nggplot(salaries, aes(x = salary, y = rank)) + \n  geom_violin(draw_quantiles = c(0.25, 0.50, 0.75))\n\nggplot(salaries, aes(x = salary, y = rank)) + \n  geom_violin(draw_quantiles = c(0.05, 0.95))\n\n\n# Continuous-by-discrete = Density\n\nggplot(salaries, aes(x = salary, y = rank)) + \n  geom_density(linewidth = 1) # error\n\nggplot(salaries, aes(x = salary, color = rank)) + \n  geom_density(linewidth = 1) # correct\n\n\n# Discrete-by-discrete = Jitter\n\nggplot(salaries, aes(x = rank, y = sex)) +\n  geom_point() # not great - all the points are on top on one another\n\nggplot(salaries, aes(x = rank, y = sex)) + \n  geom_jitter() # okay - the points are now randomly pushed a small amount\n\nggplot(salaries, aes(x = rank, y = sex)) + \n  geom_jitter(width = 0.25, height = 0.25) # we can control how much to push\n\n## We will learn better options (using summarizing and positioning) in Unit II\n```\n:::\n\n\n\n\n# Layering\n\n## Layering {.smaller}\n\n::: {.columns .pv4}\n::: {.column width=\"60%\"}\n-   ggplot2 uses a [layered]{.b .blue} grammar of graphics\n    -   We can keep [stacking geoms]{.b .green} on top\n\n::: {.fragment .mt1}\n-   Layering adds a lot of possibilities\n    -   We can convey [more complex]{.b .green} ideas\n    -   We can learn more about our data\n:::\n\n::: {.fragment .mt1}\n-   But we can still describe these graphics\n    -   Just [describe each layer]{.b .green} in turn\n    -   And describe the layers' ordering\n:::\n:::\n\n::: {.column .tc .pv5 width=\"40%\"}\n\n\n{{< li ikwcijxm trigger=loop delay=5000 colors=secondary:#2a76dd class=rc >}}\n\n\n\n\n:::\n:::\n\n## Layering Live Coding\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n# SETUP: We will need tidyverse and an example dataset\n\nlibrary(tidyverse)\n\nmpg\n\n# ==============================================================================\n\n# USECASE: Add a smooth geom (i.e., line of best fit)\n\nggplot(mpg, aes(x = displ, y = hwy)) +\n  geom_point() +\n  geom_smooth()\n\nggplot(mpg, aes(x = displ, y = hwy)) +\n  geom_point() +\n  geom_smooth(method = \"lm\")\n\n# ==============================================================================\n\n# USECASE: Add a line geom (i.e., connecting points)\n\neconomics\n\nggplot(economics, aes(x = date, y = unemploy)) + \n  geom_point()\n\nggplot(economics, aes(x = date, y = unemploy)) + \n  geom_point() +\n  geom_line(color = \"orange\", linewidth = 1) #line geom second = line on top\n\nggplot(economics, aes(x = date, y = unemploy)) + \n  geom_line(color = \"orange\", linewidth = 1) + #line geom first = line on bottom\n  geom_point()\n\n# ==============================================================================\n\n# USECASE: Add reference line geoms\n\nggplot(economics, aes(x = date, y = unemploy)) + \n  geom_hline(yintercept = 0, color = \"orange\", linewidth = 1) +\n  geom_line(color = \"blue\", linewidth = 1) +\n  geom_point()\n\nggplot(economics, aes(x = date, y = unemploy)) + \n  geom_vline(xintercept = 7.5, color = \"orange\", linewidth = 1) +\n  geom_line(color = \"blue\", linewidth = 1) +\n  geom_point() \n\nggplot(economics, aes(x = date, y = unemploy)) + \n  geom_abline(intercept = 4000, slope = 0.5, color = \"orange\", linewidth = 1) +\n  geom_line(color = \"blue\", linewidth = 1) +\n  geom_point() \n\n# ==============================================================================\n\n# USECASE: Combine different types of geoms\n\nggplot(mpg, aes(x = hwy, y = class)) + \n  geom_violin(draw_quantiles = 0.5) + \n  geom_jitter(color = \"firebrick\", height = 0.25, width = 0.25)\n```\n:::\n",
    "supporting": [
      "1B_Slides_files\\figure-html"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}