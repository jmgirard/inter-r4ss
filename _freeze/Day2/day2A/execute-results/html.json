{
  "hash": "d0b0b4cd08c673b886e7001bc260a963",
  "result": {
    "markdown": "---\ntitle: \"Day 2A\"\nformat:\n  html:\n    css: ../styles.css\n    highlight-style: github\n---\n\n\n![](../img/processing_2780E3.svg){.hero}\n\nWe begin with a discussion of how to summarize data in tibbles (which is like folding down all rows into a single row) and by group in tibbles (which is like folding down to one row per group). We will also learn about combining grouping with the mutate function, how to quickly and conveniently select columns in a tibble, and how to do basic iteration within a tibble (e.g., repeating the same operation across columns and rows).\n\n## Slides\n\n<iframe class=\"slide-deck\" src=\"./Slides/2A_Slides.html\" title=\"Day 2A Slideshow\">\n</iframe>\n\n[Click here to view the slides in their own window.](./Slides/2A_Slides.html)\n\n## Practice 1\n\nSummarize the `txhousing` tibble (included in \\{tidyverse\\}) to recreate the following tibble (where `n_obs` is the number of observations, `n_cities` is the number of unique/distinct cities, `mdn_listings` is the median number of monthly listings, `max_listings` is the maximum number of monthly listings). Ignore/remove any missing values when calculating the last two summary variables.\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 4\n  n_obs n_cities mdn_listings max_listings\n  <int>    <int>        <dbl>        <dbl>\n1  8602       46         1283        43107\n```\n:::\n:::\n\n\n<p><details>\n<summary>Click here for the answer key</summary>\n<blockquote>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\ntxhousing |> \n  summarize(\n    n_obs = n(),\n    n_cities = n_distinct(city),\n    mdn_listings = median(listings, na.rm = TRUE),\n    max_listings = max(listings, na.rm = TRUE)\n  )\n## # A tibble: 1 × 4\n##   n_obs n_cities mdn_listings max_listings\n##   <int>    <int>        <dbl>        <dbl>\n## 1  8602       46         1283        43107\n```\n:::\n\n\n</blockquote></details></p>\n\n## Practice 2\n\nSummarize the `txhousing` tibble to recreate the following tibble (where `m_price` is the mean of the `median` variable and `s_price` is the standard deviation of the `median` variable, both per city-year combination).\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 736 × 4\n   city     year m_price s_price\n   <chr>   <int>   <dbl>   <dbl>\n 1 Abilene  2000  66600    5714.\n 2 Abilene  2001  70975    6331.\n 3 Abilene  2002  68600    6756.\n 4 Abilene  2003  71933.   5598.\n 5 Abilene  2004  74867.   7892.\n 6 Abilene  2005  87592.  10139.\n 7 Abilene  2006 100292.   5187.\n 8 Abilene  2007 103650   10931.\n 9 Abilene  2008 107133.  10212.\n10 Abilene  2009 108367.   9850.\n# ℹ 726 more rows\n```\n:::\n:::\n\n\n\n<p><details>\n<summary>Click here for the answer key</summary>\n<blockquote>\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntxhousing |> \n  summarize(\n    m_price = mean(median),\n    s_price = sd(median),\n    .by = c(city, year)\n  )\n## # A tibble: 736 × 4\n##    city     year m_price s_price\n##    <chr>   <int>   <dbl>   <dbl>\n##  1 Abilene  2000  66600    5714.\n##  2 Abilene  2001  70975    6331.\n##  3 Abilene  2002  68600    6756.\n##  4 Abilene  2003  71933.   5598.\n##  5 Abilene  2004  74867.   7892.\n##  6 Abilene  2005  87592.  10139.\n##  7 Abilene  2006 100292.   5187.\n##  8 Abilene  2007 103650   10931.\n##  9 Abilene  2008 107133.  10212.\n## 10 Abilene  2009 108367.   9850.\n## # ℹ 726 more rows\n```\n:::\n\n\n</blockquote></details></p>\n\n## Practice 3\n\nUse a grouped mutate to add a new variable to the `txhousing` tibble that shows the average number of sales for that city in that year. Select only the `city`, `year`, `month`, and `sales` variables, in addition to the newly created variable.\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 8,602 × 5\n   city     year month sales avg_sales\n   <chr>   <int> <int> <dbl>     <dbl>\n 1 Abilene  2000     1    72      115.\n 2 Abilene  2000     2    98      115.\n 3 Abilene  2000     3   130      115.\n 4 Abilene  2000     4    98      115.\n 5 Abilene  2000     5   141      115.\n 6 Abilene  2000     6   156      115.\n 7 Abilene  2000     7   152      115.\n 8 Abilene  2000     8   131      115.\n 9 Abilene  2000     9   104      115.\n10 Abilene  2000    10   101      115.\n# ℹ 8,592 more rows\n```\n:::\n:::\n\n\n<p><details>\n<summary>Click here for the answer key</summary>\n<blockquote>\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntxhousing |> \n  mutate(\n    avg_sales = mean(sales),\n    .by = c(city, year)\n  ) |> \n  select(city, year, month, sales, avg_sales)\n## # A tibble: 8,602 × 5\n##    city     year month sales avg_sales\n##    <chr>   <int> <int> <dbl>     <dbl>\n##  1 Abilene  2000     1    72      115.\n##  2 Abilene  2000     2    98      115.\n##  3 Abilene  2000     3   130      115.\n##  4 Abilene  2000     4    98      115.\n##  5 Abilene  2000     5   141      115.\n##  6 Abilene  2000     6   156      115.\n##  7 Abilene  2000     7   152      115.\n##  8 Abilene  2000     8   131      115.\n##  9 Abilene  2000     9   104      115.\n## 10 Abilene  2000    10   101      115.\n## # ℹ 8,592 more rows\n```\n:::\n\n\n</blockquote></details></p>\n\n## Practice 4\n\na.    Use tidy selection to extract all variables that have names ending with \"_color\" from the `starwars` tibble.\n\nb.    Use tidy selection to extract the `name` variable and all variables from the `species` variable to the last variable in the `starwars` tibble.\n\n<p><details>\n<summary>Click here for the answer key</summary>\n<blockquote>\n\n**Answer (a)**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nstarwars |> \n  select(ends_with(\"_color\"))\n## # A tibble: 87 × 3\n##    hair_color    skin_color  eye_color\n##    <chr>         <chr>       <chr>    \n##  1 blond         fair        blue     \n##  2 <NA>          gold        yellow   \n##  3 <NA>          white, blue red      \n##  4 none          white       yellow   \n##  5 brown         light       brown    \n##  6 brown, grey   light       blue     \n##  7 brown         light       blue     \n##  8 <NA>          white, red  red      \n##  9 black         light       brown    \n## 10 auburn, white fair        blue-gray\n## # ℹ 77 more rows\n```\n:::\n\n\n**Answer (b)**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstarwars |> \n  select(name, species:last_col())\n## # A tibble: 87 × 5\n##    name               species films     vehicles  starships\n##    <chr>              <chr>   <list>    <list>    <list>   \n##  1 Luke Skywalker     Human   <chr [5]> <chr [2]> <chr [2]>\n##  2 C-3PO              Droid   <chr [6]> <chr [0]> <chr [0]>\n##  3 R2-D2              Droid   <chr [7]> <chr [0]> <chr [0]>\n##  4 Darth Vader        Human   <chr [4]> <chr [0]> <chr [1]>\n##  5 Leia Organa        Human   <chr [5]> <chr [1]> <chr [0]>\n##  6 Owen Lars          Human   <chr [3]> <chr [0]> <chr [0]>\n##  7 Beru Whitesun lars Human   <chr [3]> <chr [0]> <chr [0]>\n##  8 R5-D4              Droid   <chr [1]> <chr [0]> <chr [0]>\n##  9 Biggs Darklighter  Human   <chr [1]> <chr [0]> <chr [1]>\n## 10 Obi-Wan Kenobi     Human   <chr [6]> <chr [1]> <chr [5]>\n## # ℹ 77 more rows\n```\n:::\n\n\n</blockquote></details></p>\n\n## Practice 5\n\na.    Use `across()` to apply the `str_to_upper()` function to the `manufacturer` and `model` variables of the `mpg` tibble.\n\nb.    Use `across()` to summarize the median of every numeric variable in the `diamonds` tibble.\n\n\n<p><details>\n<summary>Click here for the answer key</summary>\n<blockquote>\n\n**Answer (a)**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpg |> \n  mutate(\n    across(\n      .cols = c(manufacturer, model), \n      .fns = str_to_upper\n    )\n  )\n## # A tibble: 234 × 11\n##    manufacturer model      displ  year   cyl trans drv     cty   hwy fl    class\n##    <chr>        <chr>      <dbl> <int> <int> <chr> <chr> <int> <int> <chr> <chr>\n##  1 AUDI         A4           1.8  1999     4 auto… f        18    29 p     comp…\n##  2 AUDI         A4           1.8  1999     4 manu… f        21    29 p     comp…\n##  3 AUDI         A4           2    2008     4 manu… f        20    31 p     comp…\n##  4 AUDI         A4           2    2008     4 auto… f        21    30 p     comp…\n##  5 AUDI         A4           2.8  1999     6 auto… f        16    26 p     comp…\n##  6 AUDI         A4           2.8  1999     6 manu… f        18    26 p     comp…\n##  7 AUDI         A4           3.1  2008     6 auto… f        18    27 p     comp…\n##  8 AUDI         A4 QUATTRO   1.8  1999     4 manu… 4        18    26 p     comp…\n##  9 AUDI         A4 QUATTRO   1.8  1999     4 auto… 4        16    25 p     comp…\n## 10 AUDI         A4 QUATTRO   2    2008     4 manu… 4        20    28 p     comp…\n## # ℹ 224 more rows\n```\n:::\n\n\n**Answer (b)**\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds |> \n  summarize(\n    across(\n      .cols = where(is.numeric), \n      .fns = median\n    )\n  )\n## # A tibble: 1 × 7\n##   carat depth table price     x     y     z\n##   <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\n## 1   0.7  61.8    57  2401   5.7  5.71  3.53\n```\n:::\n\n\n\n</blockquote></details></p>\n\n## Practice 6\n\na.    Add a new column to the `diamonds` tibble called `volume` that contains the rectangular volume of each diamond (i.e., the product or multiplication of the `x`, `y`, and `z` variables)\n\nb.    Add a new column to the `diamonds` tibble called `mdim` that contains the average dimension size of each diamond (i.e., the mean of the `x`, `y`, and `z` variables)\n\n<p><details>\n<summary>Click here for the answer key</summary>\n<blockquote>\n\n**Answer (a)**\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds |> \n  mutate(volume = x * y * z)\n## # A tibble: 53,940 × 11\n##    carat cut       color clarity depth table price     x     y     z volume\n##    <dbl> <ord>     <ord> <ord>   <dbl> <dbl> <int> <dbl> <dbl> <dbl>  <dbl>\n##  1  0.23 Ideal     E     SI2      61.5    55   326  3.95  3.98  2.43   38.2\n##  2  0.21 Premium   E     SI1      59.8    61   326  3.89  3.84  2.31   34.5\n##  3  0.23 Good      E     VS1      56.9    65   327  4.05  4.07  2.31   38.1\n##  4  0.29 Premium   I     VS2      62.4    58   334  4.2   4.23  2.63   46.7\n##  5  0.31 Good      J     SI2      63.3    58   335  4.34  4.35  2.75   51.9\n##  6  0.24 Very Good J     VVS2     62.8    57   336  3.94  3.96  2.48   38.7\n##  7  0.24 Very Good I     VVS1     62.3    57   336  3.95  3.98  2.47   38.8\n##  8  0.26 Very Good H     SI1      61.9    55   337  4.07  4.11  2.53   42.3\n##  9  0.22 Fair      E     VS2      65.1    61   337  3.87  3.78  2.49   36.4\n## 10  0.23 Very Good H     VS1      59.4    61   338  4     4.05  2.39   38.7\n## # ℹ 53,930 more rows\n```\n:::\n\n\n**Answer (b)**\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds |> \n  mutate(mdim = rowMeans(pick(x, y, z)))\n## # A tibble: 53,940 × 11\n##    carat cut       color clarity depth table price     x     y     z  mdim\n##    <dbl> <ord>     <ord> <ord>   <dbl> <dbl> <int> <dbl> <dbl> <dbl> <dbl>\n##  1  0.23 Ideal     E     SI2      61.5    55   326  3.95  3.98  2.43  3.45\n##  2  0.21 Premium   E     SI1      59.8    61   326  3.89  3.84  2.31  3.35\n##  3  0.23 Good      E     VS1      56.9    65   327  4.05  4.07  2.31  3.48\n##  4  0.29 Premium   I     VS2      62.4    58   334  4.2   4.23  2.63  3.69\n##  5  0.31 Good      J     SI2      63.3    58   335  4.34  4.35  2.75  3.81\n##  6  0.24 Very Good J     VVS2     62.8    57   336  3.94  3.96  2.48  3.46\n##  7  0.24 Very Good I     VVS1     62.3    57   336  3.95  3.98  2.47  3.47\n##  8  0.26 Very Good H     SI1      61.9    55   337  4.07  4.11  2.53  3.57\n##  9  0.22 Fair      E     VS2      65.1    61   337  3.87  3.78  2.49  3.38\n## 10  0.23 Very Good H     VS1      59.4    61   338  4     4.05  2.39  3.48\n## # ℹ 53,930 more rows\n```\n:::\n\n\n**Alternate Answer (b)**\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds |> \n  # Create row identifier\n  mutate(row_id = row_number()) |> \n  # Mutate while grouping by it\n  mutate(\n    mdim = mean(c(x, y, z)),\n    .by = row_id\n  )\n## # A tibble: 53,940 × 12\n##    carat cut      color clarity depth table price     x     y     z row_id  mdim\n##    <dbl> <ord>    <ord> <ord>   <dbl> <dbl> <int> <dbl> <dbl> <dbl>  <int> <dbl>\n##  1  0.23 Ideal    E     SI2      61.5    55   326  3.95  3.98  2.43      1  3.45\n##  2  0.21 Premium  E     SI1      59.8    61   326  3.89  3.84  2.31      2  3.35\n##  3  0.23 Good     E     VS1      56.9    65   327  4.05  4.07  2.31      3  3.48\n##  4  0.29 Premium  I     VS2      62.4    58   334  4.2   4.23  2.63      4  3.69\n##  5  0.31 Good     J     SI2      63.3    58   335  4.34  4.35  2.75      5  3.81\n##  6  0.24 Very Go… J     VVS2     62.8    57   336  3.94  3.96  2.48      6  3.46\n##  7  0.24 Very Go… I     VVS1     62.3    57   336  3.95  3.98  2.47      7  3.47\n##  8  0.26 Very Go… H     SI1      61.9    55   337  4.07  4.11  2.53      8  3.57\n##  9  0.22 Fair     E     VS2      65.1    61   337  3.87  3.78  2.49      9  3.38\n## 10  0.23 Very Go… H     VS1      59.4    61   338  4     4.05  2.39     10  3.48\n## # ℹ 53,930 more rows\n```\n:::\n\n\n</blockquote></details></p>\n\n## Challenge 1\n\nRead the documentation for the `first()`, `last()`, and `nth()` summary functions (they all share a single documentation page). Then apply these functions to do the following: (1) calculate the average number of monthly `listings` in each city (removing any missing values), and then (2) find the cities with the highest, second-highest, second-lowest, and lowest average number of monthly listings.\n\n<p><details>\n<summary>Click here for the answer key</summary>\n<blockquote>\n\n::: {.cell}\n\n```{.r .cell-code}\ntxhousing |> \n  summarize(\n    m_listings = mean(listings, na.rm = TRUE),\n    .by = city\n  ) |> \n  summarize(\n    most = first(city, order_by = m_listings),\n    second_most = nth(city, n = 2, order_by = m_listings),\n    second_least = nth(city, n = -2, order_by = m_listings),\n    least = last(city, order_by = m_listings)\n  )\n## # A tibble: 1 × 4\n##   most       second_most second_least least  \n##   <chr>      <chr>       <chr>        <chr>  \n## 1 San Marcos Nacogdoches Dallas       Houston\n```\n:::\n\n</blockquote></details></p>\n\n## Challenge 2\n\na.    Look at the code below and figure out how it works.\n\nb.    Adapt this code to create four new variables called `carat_minimum`, `carat_maximum`, `price_minimum`, and `price_maximum`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds |> \n  summarize(\n    across(\n      .cols = c(carat, price),\n      .fns = list(m = mean, s = sd),\n      .names = \"{.fn}_{.col}\"\n    )\n  )\n## # A tibble: 1 × 4\n##   m_carat s_carat m_price s_price\n##     <dbl>   <dbl>   <dbl>   <dbl>\n## 1   0.798   0.474   3933.   3989.\n```\n:::\n\n\n<p><details>\n<summary>Click here for the answer key</summary>\n<blockquote>\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds |> \n  summarize(\n    across(\n      .cols = c(carat, price),\n      .fns = list(minimum = min, maximum = max),\n      .names = \"{.col}_{.fn}\"\n    )\n  )\n## # A tibble: 1 × 4\n##   carat_minimum carat_maximum price_minimum price_maximum\n##           <dbl>         <dbl>         <int>         <int>\n## 1           0.2          5.01           326         18823\n```\n:::\n\n\n</blockquote></details></p>\n\n## Readings\n\n- [Section 4.5: Groups](https://r4ds.hadley.nz/data-transform.html#groups) from *R4DS* (2E)\n- [Selection language](https://tidyselect.r-lib.org/reference/language.html) from *tidyselect* package website\n- [Column-wise operation](https://dplyr.tidyverse.org/articles/colwise.html) from *dplyr* package website\n- [Row-wise operation](https://dplyr.tidyverse.org/articles/rowwise.html) from *dplyr* package website\n\n\n::: {.text-center}\n<a href=\"day2B.html\" class=\"btn btn-primary mt-5\" role=\"button\" >Continue to Day 2B Materials&nbsp;&nbsp;&raquo;</a>\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}