{
  "hash": "dd052e637769086d28cbb67767074b7d",
  "result": {
    "markdown": "---\nformat: \n  revealjs:\n    css: ../../styles.css\n    slide-number: true\n    show-slide-number: all\n    progress: true\n    history: true\n    hash-type: number\n    theme: default\n    code-block-background: true\n    highlight-style: github\n    code-link: false\n    code-copy: true\n    controls: true\n    pagetitle: \"Inter R4SS Day 2B\"\n    author-meta: \"Jeffrey Girard\"\n    date-meta: \"2023-06-06\"\n---\n\n\n::: {.my-title}\n# [Intermediate R]{.blue2} <br />for Social Scientists\n\n::: {.my-grey}\n[Workshop Day 2B | 2023-06-06]{}<br />\n[Jeffrey M. Girard | Pitt Methods]{}\n:::\n\n![](../../img/proud2_2780E3.svg){.absolute bottom=0 right=0 width=400}\n:::\n\n# Scales\n\n## Scales {.smaller}\n\n::: {.columns .pv4}\n\n::: {.column width=\"60%\"}\n- Scales are one of the basic gg elements\n\n::: {.mt1}\n- So far, we have let R guess on the scales\n  - Type (e.g., continuous or discrete)\n  - Limits (minimum and maximum values)\n  - Breaks (values to emphasize)\n:::\n\n::: {.fragment .mt1}\n- But we can completely [customize the scales]{.b .blue}!\n  - Changes may [enhance communication]{.b .green}\n  - We will add on various `scale_` functions\n:::\n:::\n\n::: {.column .tc .pv4 width=\"40%\"}\n\n{{< li kjeivigm trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}\n\n\n:::\n\n:::\n\n\n## Scales Live Coding\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n# Creating a base plot (map drv to color for all geoms)\nggplot(mpg, aes(x = displ, y = hwy, color = drv)) +\n  geom_jitter(size = 2) + \n  geom_smooth()\n\n# Creating a base plot (map drv to color for jitter geom only)\nggplot(mpg, aes(x = displ, y = hwy)) +\n  geom_jitter(size = 2, aes(color = drv)) + \n  geom_smooth(color = \"black\")\n\n# Configuring the limits and breaks of the continuous y axis\nggplot(mpg, aes(x = displ, y = hwy)) +\n  geom_jitter(size = 2, aes(color = drv)) + \n  geom_smooth(color = \"black\") +\n  scale_y_continuous(\n    limits = c(5, 50),\n    breaks = c(10, 20, 30, 40),\n    expand = c(0, 0)\n  )\n\n# Configuring the limits and breaks of the continuous x axis\nggplot(mpg, aes(x = displ, y = hwy)) +\n  geom_jitter(size = 2, aes(color = drv)) + \n  geom_smooth(color = \"black\") +\n  scale_y_continuous(\n    limits = c(5, 50), \n    breaks = c(10, 20, 30, 40),\n    expand = c(0, 0)\n  ) +\n  scale_x_continuous(\n    limits = c(1, 7.5),\n    breaks = c(2, 3, 4, 5, 6, 7),\n    expand = c(0, 0)\n  )\n\n# Configuring the breaks and labels of the discrete color scale\nggplot(mpg, aes(x = displ, y = hwy)) +\n  geom_jitter(size = 2, aes(color = drv)) + \n  geom_smooth(color = \"black\") +\n  scale_y_continuous(\n    limits = c(5, 50), \n    breaks = c(10, 20, 30, 40),\n    expand = c(0, 0)\n  ) +\n  scale_x_continuous(\n    limits = c(1, 7.5),\n    breaks = c(2, 3, 4, 5, 6, 7),\n    expand = c(0, 0)\n  ) +\n  scale_color_discrete(\n    breaks = c(\"r\", \"f\", \"4\"), # change ordering\n    labels = c(\n      \"4\" = \"Four-Wheel\",\n      \"f\" = \"Front-Wheel\",\n      \"r\" = \"Rear-Wheel\"\n    )\n  )\n\n# Manually specifying the color values\nggplot(mpg, aes(x = displ, y = hwy)) +\n  geom_jitter(aes(color = drv)) + \n  geom_smooth(color = \"black\") +\n  scale_y_continuous(\n    limits = c(5, 50), \n    breaks = c(10, 20, 30, 40),\n    expand = c(0, 0)\n  ) +\n  scale_x_continuous(\n    limits = c(1, 7.5),\n    breaks = c(2, 3, 4, 5, 6, 7),\n    expand = c(0, 0)\n  ) +\n  scale_color_manual(\n    breaks = c(\"r\", \"f\", \"4\"),\n    labels = c(\n      \"4\" = \"Four-Wheel\",\n      \"f\" = \"Front-Wheel\",\n      \"r\" = \"Rear-Wheel\"\n    ),\n    values = c(\n      \"4\" = \"salmon\",\n      \"f\" = \"cornflowerblue\",\n      \"r\" = \"seagreen3\"\n    )\n  )\n\n# Add a redundant shape mapping\nggplot(mpg, aes(x = displ, y = hwy)) +\n  geom_jitter(size = 2, aes(color = drv, shape = drv)) + \n  geom_smooth(color = \"black\") +\n  scale_y_continuous(\n    limits = c(5, 50), \n    breaks = c(10, 20, 30, 40),\n    expand = c(0, 0)\n  ) +\n  scale_x_continuous(\n    limits = c(1, 7.5),\n    breaks = c(2, 3, 4, 5, 6, 7),\n    expand = c(0, 0)\n  ) +\n  scale_color_manual(\n    breaks = c(\"r\", \"f\", \"4\"),\n    labels = c(\n      \"4\" = \"Four-Wheel\",\n      \"f\" = \"Front-Wheel\",\n      \"r\" = \"Rear-Wheel\"\n    ),\n    values = c(\n      \"4\" = \"salmon\",\n      \"f\" = \"cornflowerblue\",\n      \"r\" = \"seagreen3\"\n    )\n  ) +\n  scale_shape_discrete(\n    breaks = c(\"r\", \"f\", \"4\"),\n    labels = c(\n      \"4\" = \"Four-Wheel\",\n      \"f\" = \"Front-Wheel\",\n      \"r\" = \"Rear-Wheel\"\n    )\n  )\n```\n:::\n\n\n\n# Labels\n\n## Labels {.smaller}\n\n::: {.columns .pv4}\n\n::: {.column width=\"60%\"}\n- By default, scales are named after data variables\n\n::: {.mt1}\n- Changing names may [enhance communication]{.b .blue}\n  - Provide accessible names/definitions\n  - Include units and other methods info.\n  - Appear prettier and more professional\n:::\n\n::: {.fragment .mt1}\n- We can also add [plot-level information]{.b .blue}\n  - Titles and subtitles for take-aways\n  - Captions for asides or data sources\n:::\n\n::: {.fragment .mt1}\n- This is all done by adding on `labs()`\n:::\n:::\n\n::: {.column .tc .pv4 width=\"40%\"}\n\n{{< li aravllcl trigger=loop delay=5000 colors=primary:#2a76dd class=rc >}}\n\n\n:::\n\n:::\n\n## Labels Live Coding\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n# Save plot from last section as an object (not necessary, but saves space)\np <- \n  ggplot(mpg, aes(x = displ, y = hwy)) +\n    geom_jitter(size = 2, aes(color = drv, shape = drv)) + \n    geom_smooth(color = \"black\") +\n    scale_y_continuous(\n      limits = c(5, 50), \n      breaks = c(10, 20, 30, 40),\n      expand = c(0, 0)\n    ) +\n    scale_x_continuous(\n      limits = c(1, 7.5),\n      breaks = c(2, 3, 4, 5, 6, 7),\n      expand = c(0, 0)\n    ) +\n    scale_color_manual(\n      breaks = c(\"r\", \"f\", \"4\"),\n      labels = c(\n        \"4\" = \"Four-Wheel\",\n        \"f\" = \"Front-Wheel\",\n        \"r\" = \"Rear-Wheel\"\n      ),\n      values = c(\n        \"4\" = \"salmon\",\n        \"f\" = \"cornflowerblue\",\n        \"r\" = \"seagreen3\"\n      )\n    ) +\n    scale_shape_discrete(\n      breaks = c(\"r\", \"f\", \"4\"),\n      labels = c(\n        \"4\" = \"Four-Wheel\",\n        \"f\" = \"Front-Wheel\",\n        \"r\" = \"Rear-Wheel\"\n      )\n    )\np\n\n# Adjusting the positional (x and y) axis titles\np +\n  labs(\n    x = \"Engine displacement (L)\",\n    y = \"Highway fuel economy (mpg)\"\n  )\n\n# Adjusting the color and shape legend titles\np +\n  labs(\n    x = \"Engine displacement (L)\",\n    y = \"Highway fuel economy (mpg)\",\n    color = \"Drivetrain\",\n    shape = \"Drivetrain\"\n  )\n\n\n# Adding a title\np +\n  labs(\n    x = \"Engine displacement (L)\",\n    y = \"Highway fuel economy (mpg)\",\n    color = \"Drivetrain\",\n    shape = \"Drivetrain\",\n    title = \"Fuel efficiency generally decreases with engine size\"\n  )\n\n# Adding a subtitle\np + \n  labs(\n    x = \"Engine displacement (L)\",\n    y = \"Highway fuel economy (mpg)\",\n    color = \"Drivetrain\",\n    shape = \"Drivetrain\",\n    title = \"Fuel efficiency generally decreases with engine size\",\n    subtitle = \"Rear-wheel drive vehicles are often an exception due to sports cars' light weight\"\n  )\n\n# Adding a caption\np +\n  labs(\n    x = \"Engine displacement (L)\",\n    y = \"Highway fuel economy (mpg)\",\n    color = \"Drivetrain\",\n    shape = \"Drivetrain\",\n    title = \"Fuel efficiency generally decreases with engine size\",\n    subtitle = \"Rear-wheel drive vehicles are often an exception due to sports cars' light weight\",\n    caption = \"Data from fueleconomy.gov\"\n  )\n```\n:::\n\n\n\n# Themes\n\n## Themes {.smaller}\n::: {.columns .pv4}\n\n::: {.column width=\"60%\"}\n- Themes let you control [non-data elements]{.b .blue}\n  - Font size and color\n  - Ticks and gridlines\n  - Legend position\n\n::: {.fragment .mt1}\n- Complete themes change many elements\n  - `theme_*()`\n:::\n\n::: {.fragment .mt1}\n- Individual elements can also be changed\n  - `theme(...)`\n  - `element_*()`\n:::\n:::\n\n::: {.column .tc .pv4 width=\"40%\"}\n\n{{< li hbkyydsg trigger=loop delay=5000 colors=secondary:#2a76dd class=rc >}}\n\n\n:::\n\n:::\n\n\n## Themes Live Coding\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n# Save plot from last section as an object (not necessary, but saves space)\np <- \n  ggplot(mpg, aes(x = displ, y = hwy)) +\n    geom_jitter(size = 2, aes(color = drv, shape = drv)) + \n    geom_smooth(color = \"black\") +\n    scale_y_continuous(\n      limits = c(5, 50), \n      breaks = c(10, 20, 30, 40),\n      expand = c(0, 0)\n    ) +\n    scale_x_continuous(\n      limits = c(1, 7.5),\n      breaks = c(2, 3, 4, 5, 6, 7),\n      expand = c(0, 0)\n    ) +\n    scale_color_manual(\n      breaks = c(\"r\", \"f\", \"4\"),\n      labels = c(\n        \"4\" = \"Four-Wheel\",\n        \"f\" = \"Front-Wheel\",\n        \"r\" = \"Rear-Wheel\"\n      ),\n      values = c(\n        \"4\" = \"salmon\",\n        \"f\" = \"cornflowerblue\",\n        \"r\" = \"seagreen3\"\n      )\n    ) +\n    scale_shape_discrete(\n      breaks = c(\"r\", \"f\", \"4\"),\n      labels = c(\n        \"4\" = \"Four-Wheel\",\n        \"f\" = \"Front-Wheel\",\n        \"r\" = \"Rear-Wheel\"\n      )\n    ) +\n  labs(\n    x = \"Engine displacement (L)\",\n    y = \"Highway fuel economy (mpg)\",\n    color = \"Drivetrain\",\n    shape = \"Drivetrain\",\n    title = \"Fuel efficiency generally decreases with engine size\",\n    subtitle = \"Rear-wheel drive vehicles are often an exception due to sports cars' light weight\",\n    caption = \"Data from fueleconomy.gov\"\n  )\np\n\n# Add complete themes to change many elements at once\np + theme_classic()\n\np + theme_bw()\n\np + theme_minimal()\n\np + theme_dark()\n\n# Modify the \"base size\" for labels in the plot\n\np + theme_minimal(base_size = 20) # too big\np + theme_minimal(base_size = 5) # too small\np + theme_minimal(base_size = 12) # just right\n\n# Customize specific elements one-by-one\n\n## Customize the legend position\np + theme(legend.position = \"bottom\")\np + theme(legend.position = \"none\")\np + theme(legend.position = c(0.9, 0.8))\n\n## Customize text elements\np + \n  theme(\n    legend.position = c(0.9, 0.8),\n    axis.title = element_text(color = \"grey50\"),\n    legend.title = element_text(color = \"grey50\"),\n    plot.title = element_text(face = \"bold\")\n  )\n\n## Customize line elements\np + \n  theme(\n    legend.position = c(0.9, 0.8),\n    axis.title = element_text(color = \"grey50\"),\n    legend.title = element_text(color = \"grey50\"),\n    plot.title = element_text(face = \"bold\"),\n    panel.grid.major = element_line(linewidth = 2/3, linetype = \"dashed\"),\n    axis.ticks = element_line(linewidth = 2/3)\n  )\n\n## Removing (or \"blanking\") elements\np + \n  theme(\n    legend.position = c(0.9, 0.8),\n    axis.title = element_text(color = \"grey50\"),\n    legend.title = element_text(color = \"grey50\"),\n    plot.title = element_text(face = \"bold\"),\n    panel.grid.major = element_line(linewidth = 2/3, linetype = \"dashed\"),\n    axis.ticks = element_line(linewidth = 2/3),\n    panel.grid.minor = element_blank()\n  )\n\n## Customizing rectangle elements\np + \n  theme(\n    legend.position = c(0.9, 0.8),\n    axis.title = element_text(color = \"grey50\"),\n    legend.title = element_text(color = \"grey50\"),\n    plot.title = element_text(face = \"bold\"),\n    panel.grid.major = element_line(linewidth = 2/3, linetype = \"dashed\"),\n    axis.ticks = element_line(linewidth = 2/3),\n    panel.grid.minor = element_blank(),\n    panel.background = element_rect(fill = \"antiquewhite\")\n  )\n\n# Applying the same theme to many plots\n\nmytheme <- \n  theme(\n    legend.position = c(0.9, 0.8),\n    axis.title = element_text(color = \"grey50\"),\n    legend.title = element_text(color = \"grey50\"),\n    plot.title = element_text(face = \"bold\"),\n    panel.grid.major = element_line(linewidth = 2/3, linetype = \"dashed\"),\n    axis.ticks = element_line(linewidth = 2/3),\n    panel.grid.minor = element_blank(),\n    panel.background = element_rect(fill = \"antiquewhite\")\n  )\n\np + mytheme\n```\n:::\n\n\n# Faceting\n\n## Faceting {.smaller}\n\n::: {.columns .pv4}\n\n::: {.column width=\"60%\"}\n-   [Faceting]{.b .blue} creates multiple subplots\n    -   Each shows a subset of the data\n\n::: {.fragment .mt1}\n-   There are two types of faceting\n    -   **Grid** creates a 2D matrix (`row~col`)\n    -   **Wrap** creates a 1D list (`~var`)\n\n![](../../img/facet.png){width=\"70%\"}\n    \n:::\n\n:::\n\n::: {.column .tc .pv4 width=\"40%\"}\n\n{{< li gpjaxlut trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}\n\n\n:::\n\n:::\n\n## Faceting Live Coding\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n# Filter out a subset of mpg to use in this section (optional)\nmpg2 <- mpg |> \n  filter(\n    cyl != 5,\n    drv %in% c(\"4\", \"f\"), \n    class != \"2seater\"\n  )\n\n# Create a baseline plot without faceting\np <- ggplot(mpg2, aes(x = displ, y = hwy)) + geom_point()\np\n\n# Add facet wrapping by ~class\np + facet_wrap(~class)\n\n# Control the shape of the output\np + facet_wrap(~class, ncol = 2)\np + facet_wrap(~class, nrow = 2)\n\n# Control the direction of the wrapping (i.e., ordering)\np + facet_wrap(~class, ncol = 2, dir = \"v\") #vertical / top-to-bottom\np + facet_wrap(~class, ncol = 2, dir = \"h\") #horizontal / left-to-right\n\n# Add facet grid by . ~ cyl where each column is a cyl value\np + facet_grid(. ~ cyl)\np + facet_grid(. ~ cyl, labeller = label_both)\n\n# Add facet grid by drv ~ . where each row is a drv value\np + facet_grid(drv ~ ., labeller = label_both)\n\n# Add facet grid by drv ~ cyl where each cell is a drv-cyl combination\np + facet_grid(drv ~ cyl, labeller = label_both)\n\n# We can free up the scales to \"zoom\" for each facet\np + facet_grid(drv ~ cyl, labeller = label_both, scales = \"free\")\np + facet_grid(drv ~ cyl, labeller = label_both, scales = \"free_x\")\np + facet_grid(drv ~ cyl, labeller = label_both, scales = \"free_y\")\n\n# Another example\nggplot(mpg2, aes(x = cty, y = hwy)) + \n  geom_point() + \n  geom_abline(slope = 1, intercept = 0)\n\nggplot(mpg2, aes(x = cty, y = hwy)) + \n  geom_point() + \n  geom_abline(slope = 1, intercept = 0) + \n  facet_wrap(~cyl)\n\nggplot(mpg2, aes(x = cty, y = hwy)) + \n  geom_point() + \n  geom_abline(slope = 1, intercept = 0) + \n  facet_wrap(~cyl, scales = \"free\")\n```\n:::\n\n\n# Layouts\n\n## Layouts {.smaller}\n\n::: {.columns .pv4}\n\n::: {.column width=\"60%\"}\n-   We may want to combine multiple plots into one\n    -   e.g., for communication and publishing\n    -   e.g., to compare/contrast several plots\n    -   e.g., to combine related \"subfigures\"\n    -   e.g., to create complex figure layouts\n\n::: {.fragment .mt1}\n-   To do so, we can use the \\{patchwork\\} package\n    -   This redefines the `+`, `|`, `\\` operators\n    -   We use these to combine ggplot objects\n    -   We can control layout and annotations\n:::\n:::\n\n::: {.column .tc .pv4 width=\"40%\"}\n\n{{< li joeivjls trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}\n\n\n:::\n\n:::\n\n## Layouts Live Coding\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n#install.packages(\"patchwork\")\nlibrary(patchwork)\n\n# Create example plots\np1 <- ggplot(mpg, aes(x = displ)) + geom_histogram(bins = 10) + \n  labs(x = \"Engine Displacement\", y = NULL)\np2 <- ggplot(mpg, aes(x = hwy)) + geom_histogram(bins = 10) + \n  labs(x = \"Highway MPG\", y = NULL)\np3 <- ggplot(mpg, aes(x = displ, y = hwy)) + geom_point() +\n  labs(x = \"Engine Displacement\", y = \"Highway MPG\")\np4 <- ggplot(mpg, aes(x = displ, y = hwy)) + geom_smooth() +\n  labs(x = \"Engine Displacement\", y = \"Highway MPG\")\n\n# Combine plots\np1 + p2\n\n# Control the layout\np1 + p2 + plot_layout(ncol = 2)\np1 + p2 + plot_layout(nrow = 2)\n\n# Expand to three plots\np1 + p2 + p3\n\n# Controlling the layout\np1 + p2 + p3 + plot_layout(ncol = 3)\np1 + p2 + p3 + plot_layout(nrow = 3)\np1 + p2 + p3 + plot_layout(ncol = 2, nrow = 2)\n\n# Adding spacers to layout\np1 + p2 + plot_spacer() + p3 + plot_layout(ncol = 2, nrow = 2)\n\np1 + plot_spacer() + p2 + plot_spacer() + p3 + plot_spacer() + \n  plot_layout(ncol = 3, nrow = 2)\n\n# Layout plots side-by-side\np1 | p2\np1 | p2 | p3\n\n# Combine plots above-and-below\np1 / p2\np1 / p2 / p3\n\n# Mix and Match with Parentheses\n(p1 | p2) / p3\n(p1 / p2) | p3\n\n# Use spacers with explicit layout\n(p1 | plot_spacer() | p2) / (plot_spacer() | p3 | plot_spacer())\n\n# Change the relative size of columns/rows\np1 + p3 + p2 + p4 + plot_layout(widths = c(1, 2))\np1 + p2 + p3 + p4 + plot_layout(heights = c(1, 2))\n\n# Add labels to overall plot\n((p1 / p2) | p3) + plot_annotation(\n  title = \"Overall title\",\n  caption = \"Data from fueleconomy.gov\"\n)\n\n# Automated plot annotation\n((p1 / p2) | p3) + plot_annotation(tag_levels = \"a\")\n((p1 / p2) | p3) + plot_annotation(tag_levels = \"1\")\n((p1 / p2) | p3) + plot_annotation(tag_levels = \"a\", tag_suffix = \")\")\n```\n:::\n\n\n\n# Exporting\n\n## Exporting {.smaller}\n\n::: {.columns .pv4}\n\n::: {.column width=\"60%\"}\n-   `ggsave()` exports ggplots to files\n    -   We control the exact size and format\n    \n::: {.fragment .mt1}\n-   [Raster]{.b .blue} ([png]{.b}, jpg, bmp, tif): Compatibility\n\n    \n::: {.mt1}\n-   [Vector]{.b .blue} ([pdf]{.b}, svg, wmf, eps): Scalability\n:::\n\n![](../../img/formats.png)\n\n:::\n:::\n\n::: {.column .tc .pv4 width=\"40%\"}\n\n{{< li amfaktum trigger=loop delay=3000 colors=primary:#2a76dd class=rc >}}\n\n\n:::\n\n:::\n\n## Exporting Live Coding\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\np <- ggplot(mpg, aes(x = displ, y = hwy)) + geom_smooth() +\n  labs(x = \"Engine Displacement\", y = \"Highway MPG\")\np\n\n# Save a specific ggplot object to a file\nggsave(filename = \"pfinal.png\", plot = p)\n\n# Specify the size of the file to save\nggsave(filename = \"pfinal2.png\", plot = p, \n       width = 6, height = 3, units = \"in\")\n#open file and zoom in\n\n# Many file formats are available (raster and vector)\nggsave(filename = \"pfinal2.pdf\", plot = p, \n       width = 6, height = 3, units = \"in\")\n#open file and zoom in\n\n# Creating a very large image may result in small text however\nggsave(filename = \"p_poster.png\", plot = p, \n       width = 12, height = 8, units = \"in\")\n\n# You can quickly increase the text size using theme_*(base_size)\np2 <- p + theme_grey(base_size = 24)\nggsave(filename = \"p_poster2.png\", plot = p2,\n       width = 12, height = 8, units = \"in\")\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\r\n<script>\r\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\r\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\r\n  // slide changes (different for each slide format).\r\n  (function () {\r\n    // dispatch for htmlwidgets\r\n    function fireSlideEnter() {\r\n      const event = window.document.createEvent(\"Event\");\r\n      event.initEvent(\"slideenter\", true, true);\r\n      window.document.dispatchEvent(event);\r\n    }\r\n\r\n    function fireSlideChanged(previousSlide, currentSlide) {\r\n      fireSlideEnter();\r\n\r\n      // dispatch for shiny\r\n      if (window.jQuery) {\r\n        if (previousSlide) {\r\n          window.jQuery(previousSlide).trigger(\"hidden\");\r\n        }\r\n        if (currentSlide) {\r\n          window.jQuery(currentSlide).trigger(\"shown\");\r\n        }\r\n      }\r\n    }\r\n\r\n    // hookup for slidy\r\n    if (window.w3c_slidy) {\r\n      window.w3c_slidy.add_observer(function (slide_num) {\r\n        // slide_num starts at position 1\r\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\r\n      });\r\n    }\r\n\r\n  })();\r\n</script>\r\n\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}