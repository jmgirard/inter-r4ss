{
  "hash": "6369709dcea0c7def593c2ae3db01f5c",
  "result": {
    "markdown": "---\nformat: \n  revealjs:\n    css: ../../styles.css\n    slide-number: true\n    show-slide-number: all\n    progress: true\n    history: true\n    hash-type: number\n    theme: default\n    code-block-background: true\n    highlight-style: github\n    code-link: false\n    code-copy: true\n    controls: true\n    pagetitle: \"Inter R4SS Day 3B\"\n    author-meta: \"Jeffrey Girard\"\n    date-meta: \"2023-06-07\"\n---\n\n\n::: {.my-title}\n# [Intermediate R]{.blue2} <br />for Social Scientists\n\n::: {.my-grey}\n[Workshop Day 3B | 2023-06-07]{}<br />\n[Jeffrey M. Girard | Pitt Methods]{}\n:::\n\n![](../../img/proud2_2780E3.svg){.absolute bottom=0 right=0 width=400}\n:::\n\n\n# Refresher\n\n## LM Formulas\n\n## Model Parameters\n\n## Model Performance\n\n## Plotting Predictions\n\n## Model Diagnostics\n\n\n# GLM\n\n## Conceptual Overview\n\n$$\n\\begin{align}\ny_i &\\sim \\color{blue}{\\text{family}}(\\mu_i, \\ldots) \\\\\n\\color{blue}{\\text{link}}(\\mu_i) &= b_0 + b_1 x_{1i} + \\cdots + b_p x_{pi} \n\\end{align}\n$$\n\n$$\n\\begin{align}\ny_i &\\sim \\text{Gaussian}(\\mu_i, \\sigma) \\\\\n\\text{identity}(\\mu_i) &= b_0 + b_1 x_i\n\\end{align}\n$$\n\n\n## GLM Families\n\n\n\n## Binary Regression\n\n## Binary Regression Live Coding\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n## Load packages (after installing, if needed)\nlibrary(tidyverse)\nlibrary(easystats)\n\n## Read in some example binary data and mutate the outcome to be 0 vs. 1\ntitanic <- \n  read_csv(\"titanic.csv\") |> \n  mutate(survived = if_else(survived == \"yes\", true = 1, false = 0)) |> \n  print()\n\n## Visualize the relationship between fare and survival\nggplot(titanic, aes(x = fare, y = survived)) +\n  geom_point() +\n  geom_smooth()\n\n## Fit a basic regression using LM\nfit <- lm(\n  formula = survived ~ fare, \n  data = titanic\n)\nmodel_parameters(fit)\nmodel_performance(fit)\nplot(estimate_expectation(fit))\ncheck_model(fit)\n\n## Fit a logistic regression using GLM\nfit2 <- glm(\n  formula = survived ~ fare, \n  family = binomial(link = \"logit\"), \n  data = titanic\n)\nmodel_parameters(fit2)\nmodel_parameters(fit2, exponentiate = TRUE)\nmodel_performance(fit2)\nplot(estimate_link(fit2))\nplot(estimate_expectation(fit2))\ncheck_model(fit2)\n\n## Estimate the model's expectation for specific values of the predictor(s)\nestimate_expectation(fit2, tibble(fare = c(10, 50, 100)))\n\n## Note: To fit a probit binary regression, just use binomial(link = \"probit\")\n```\n:::\n\n\n\n## Count Regression\n\n## Count Regression Live Coding\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n# Read in some example count data\ndisc <- read_csv(\"discoveries.csv\")\ndisc\n\n# Visualize the relationship between year and discovery count\nggplot(disc, aes(x = year, y = count)) + \n  geom_point() +\n  geom_smooth()\n\n# Fit a linear regression using LM\nfit <- lm(\n  formula = count ~ poly(year, degree = 2), \n  data = disc\n)\nmodel_parameters(fit)\nmodel_performance(fit)\nplot(estimate_relation(fit))\ncheck_model(fit)\n\n# Fit a poisson regression using GLM\nfit2 <- glm(\n  formula = count ~ poly(year, degree = 2),\n  family = poisson(link = \"log\"), \n  data = disc\n)\nmodel_parameters(fit2)\nmodel_parameters(fit2, exponentiate = TRUE)\nmodel_performance(fit2)\nplot(estimate_relation(fit2))\ncheck_overdispersion(fit2)\n\n# Due to over-dispersion, fit quasi-poisson using GLM\nfit3 <- glm(\n  count ~ poly(year, degree = 2), \n  family = quasipoisson(link = \"log\"), \n  data = disc\n)\nmodel_parameters(fit3)\nmodel_parameters(fit3, exponentiate = TRUE)\nplot(estimate_relation(fit3))\n\n# Compare parameters between poisson and quasi-poisson\ncompare_parameters(fit2, fit3, select = \"ci_p2\")\n```\n:::\n\n\n# MLM\n\n## Conceptual Overview\n\n## Cluster-Robust Standard Errors\n\n## Random Intercepts\n\n## Fixed Predictors\n\n## Random Effects\n\n## Cross-level Interactions\n\n## Comparing Models\n\n## Repeated/Longitudinal Data\n\n## Centering and Disaggregating\n\n## Effect Sizes\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\r\n<script>\r\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\r\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\r\n  // slide changes (different for each slide format).\r\n  (function () {\r\n    // dispatch for htmlwidgets\r\n    function fireSlideEnter() {\r\n      const event = window.document.createEvent(\"Event\");\r\n      event.initEvent(\"slideenter\", true, true);\r\n      window.document.dispatchEvent(event);\r\n    }\r\n\r\n    function fireSlideChanged(previousSlide, currentSlide) {\r\n      fireSlideEnter();\r\n\r\n      // dispatch for shiny\r\n      if (window.jQuery) {\r\n        if (previousSlide) {\r\n          window.jQuery(previousSlide).trigger(\"hidden\");\r\n        }\r\n        if (currentSlide) {\r\n          window.jQuery(currentSlide).trigger(\"shown\");\r\n        }\r\n      }\r\n    }\r\n\r\n    // hookup for slidy\r\n    if (window.w3c_slidy) {\r\n      window.w3c_slidy.add_observer(function (slide_num) {\r\n        // slide_num starts at position 1\r\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\r\n      });\r\n    }\r\n\r\n  })();\r\n</script>\r\n\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}