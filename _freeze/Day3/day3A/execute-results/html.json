{
  "hash": "2a2190af0a9b5b6cc0b643f304e15d3f",
  "result": {
    "markdown": "---\ntitle: \"Day 3A\"\nformat:\n  html:\n    css: ../styles.css\n    highlight-style: github\n---\n\n\n![](../img/memory_2780E3.svg){.hero}\n\nWe finish up our final section on data wrangling by discussing the reshaping of columns and entire tibbles with the separate, unite, and pivot functions. We then discuss how to combine data from multiple tibbles or data files with the same/similar formats (e.g., separate files per participant) and how to join related/linked data that is spread across multiple tibbles or data files (e.g., separate files for different variables of the same participants).\n\n## Slides\n\n<iframe class=\"slide-deck\" src=\"./Slides/3A_Slides.html\" title=\"Day 3A Slideshow\">\n</iframe>\n\n[Click here to view the slides in their own window.](./Slides/3A_Slides.html)\n\n## Data Files\n\nIf you want to follow along with the part where we read in data from multiple files, run this code to generate some example files:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\n# Create three tibbles with simulated daily diary data\ndf1 <- tibble(day = 1:30, mood = round(rnorm(30, 5, 1)))\ndf2 <- tibble(day = 1:30, mood = round(rnorm(30, 4, 1)))\ndf3 <- tibble(day = 1:30, mood = round(rnorm(30, 4, 2)))\n\n# Create a subfolder in your project folder called data\ndir.create(\"data\")\n\n# Write each tibble to a CSV file in the data folder\nwrite_csv(df1, file = \"data/pid_001.csv\")\nwrite_csv(df2, file = \"data/pid_002.csv\")\nwrite_csv(df3, file = \"data/pid_003.csv\")\n```\n:::\n\n\n\n## Practice 1\n\nExamine the `table5` tibble (included in \\{tidyverse\\}) and tidy it up using `separate()` and `unite()`. End with variables for country, four-digit year (YYYY), number of tuberculosis cases, and population.\n\n<p><details>\n<summary>Click here for the answer key</summary>\n<blockquote>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\ntable5 |> \n  unite(\n    col = \"year\",\n    century, \n    year, \n    sep = \"\"\n  ) |> \n  separate_wider_delim(\n    col = rate, \n    delim = \"/\",\n    names = c(\"cases\", \"population\")\n  )\n## # A tibble: 6 × 4\n##   country     year  cases  population\n##   <chr>       <chr> <chr>  <chr>     \n## 1 Afghanistan 1999  745    19987071  \n## 2 Afghanistan 2000  2666   20595360  \n## 3 Brazil      1999  37737  172006362 \n## 4 Brazil      2000  80488  174504898 \n## 5 China       1999  212258 1272915272\n## 6 China       2000  213766 1280428583\n```\n:::\n\n\n</blockquote></details></p>\n\n## Practice 2\n\nReshape the `billboard` tibble (included in \\{tidyverse\\}) to a long format such that each row represents a single track’s ranking for a single week (variables: `artist`, `track`, `date.entered`, `week`, `rank`). For a challenge, remove the prefix from your final week variable and convert it into a numeric variable.\n\n<p><details>\n<summary>Click here for the answer key</summary>\n<blockquote>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbillboard |> \n  pivot_longer(\n    cols = starts_with(\"wk\"), \n    names_to = \"week\", \n    values_to = \"rank\",\n    names_prefix = \"wk\", # Challenge\n    names_transform = parse_number # Challenge\n  )\n## # A tibble: 24,092 × 5\n##    artist track                   date.entered  week  rank\n##    <chr>  <chr>                   <date>       <dbl> <dbl>\n##  1 2 Pac  Baby Don't Cry (Keep... 2000-02-26       1    87\n##  2 2 Pac  Baby Don't Cry (Keep... 2000-02-26       2    82\n##  3 2 Pac  Baby Don't Cry (Keep... 2000-02-26       3    72\n##  4 2 Pac  Baby Don't Cry (Keep... 2000-02-26       4    77\n##  5 2 Pac  Baby Don't Cry (Keep... 2000-02-26       5    87\n##  6 2 Pac  Baby Don't Cry (Keep... 2000-02-26       6    94\n##  7 2 Pac  Baby Don't Cry (Keep... 2000-02-26       7    99\n##  8 2 Pac  Baby Don't Cry (Keep... 2000-02-26       8    NA\n##  9 2 Pac  Baby Don't Cry (Keep... 2000-02-26       9    NA\n## 10 2 Pac  Baby Don't Cry (Keep... 2000-02-26      10    NA\n## # ℹ 24,082 more rows\n```\n:::\n\n\n</blockquote></details></p>\n\n## Practice 3\n\nReshape the `table2` tibble (included in \\{tidyverse\\}) so that each row represents a single country in a single year (Hint: variables should be `country`, `year`, `cases`, and `population`).\n\n<p><details>\n<summary>Click here for the answer key</summary>\n<blockquote>\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable2 |> \n  pivot_wider(names_from = type, values_from = count)\n## # A tibble: 6 × 4\n##   country      year  cases population\n##   <chr>       <dbl>  <dbl>      <dbl>\n## 1 Afghanistan  1999    745   19987071\n## 2 Afghanistan  2000   2666   20595360\n## 3 Brazil       1999  37737  172006362\n## 4 Brazil       2000  80488  174504898\n## 5 China        1999 212258 1272915272\n## 6 China        2000 213766 1280428583\n```\n:::\n\n\n</blockquote></details></p>\n\n## Practice 4\n\nInstall and load the \\{Lahman\\} package, which contains data about baseball teams and players.\n\na. Explore how the `People`, `Batting`, and `Salaries` tables are connected.\n\nb. How would you join this data to compare the salaries of right-handed and left-handed batters? Do so using a \\{tidyverse\\} function and select only the relevant variables.\n\n*Note: These tables are data frames not tibbles (so they will print a **lot** of rows). To fix this, you can use `x <- as_tibble(x)` to convert them to tibbles.*\n\n<p><details>\n<summary>Click here for the answer key</summary>\n<blockquote>\n\n**Answer (a)**\n\nAll three tables are connected via the `playerID` variable.\n\n**Answer (b)**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(Lahman) # must be installed first\n\njoined_data <- \n  inner_join(People, Salaries, by = \"playerID\") |>  \n  select(playerID, nameFirst, nameLast, bats, yearID, teamID, salary) |>\n  as_tibble() |> \n  print()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 26,428 × 7\n   playerID  nameFirst nameLast bats  yearID teamID  salary\n   <chr>     <chr>     <chr>    <fct>  <int> <fct>    <int>\n 1 aardsda01 David     Aardsma  R       2004 SFN     300000\n 2 aardsda01 David     Aardsma  R       2007 CHA     387500\n 3 aardsda01 David     Aardsma  R       2008 BOS     403250\n 4 aardsda01 David     Aardsma  R       2009 SEA     419000\n 5 aardsda01 David     Aardsma  R       2010 SEA    2750000\n 6 aardsda01 David     Aardsma  R       2011 SEA    4500000\n 7 aardsda01 David     Aardsma  R       2012 NYA     500000\n 8 aasedo01  Don       Aase     R       1986 BAL     600000\n 9 aasedo01  Don       Aase     R       1987 BAL     625000\n10 aasedo01  Don       Aase     R       1988 BAL     675000\n# ℹ 26,418 more rows\n```\n:::\n:::\n\n\n\n</blockquote></details></p>\n\n## Practice 5\n\na. Join the `band_members` and `band_instruments` tibbles (included in \\{tidyverse\\}) using all four basic types of joins. Compare the results.\n\nb. Now join the `band_members` and `band_instruments2` tibbles in a way that adds the instrument played by each name in `band_members.`\n\n<p><details>\n<summary>Click here for the answer key</summary>\n<blockquote>\n\n**Answer (a)**\n\n::: {.cell}\n\n```{.r .cell-code}\nleft_join(band_members, band_instruments, by = \"name\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 3\n  name  band    plays \n  <chr> <chr>   <chr> \n1 Mick  Stones  <NA>  \n2 John  Beatles guitar\n3 Paul  Beatles bass  \n```\n:::\n\n```{.r .cell-code}\nright_join(band_members, band_instruments, by = \"name\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 3\n  name  band    plays \n  <chr> <chr>   <chr> \n1 John  Beatles guitar\n2 Paul  Beatles bass  \n3 Keith <NA>    guitar\n```\n:::\n\n```{.r .cell-code}\ninner_join(band_members, band_instruments, by = \"name\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 3\n  name  band    plays \n  <chr> <chr>   <chr> \n1 John  Beatles guitar\n2 Paul  Beatles bass  \n```\n:::\n\n```{.r .cell-code}\nfull_join(band_members, band_instruments, by = \"name\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 × 3\n  name  band    plays \n  <chr> <chr>   <chr> \n1 Mick  Stones  <NA>  \n2 John  Beatles guitar\n3 Paul  Beatles bass  \n4 Keith <NA>    guitar\n```\n:::\n:::\n\n\n**Answer (b)**\n\n::: {.cell}\n\n```{.r .cell-code}\nleft_join(band_members, band_instruments2, by = c(\"name\" = \"artist\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 3\n  name  band    plays \n  <chr> <chr>   <chr> \n1 Mick  Stones  <NA>  \n2 John  Beatles guitar\n3 Paul  Beatles bass  \n```\n:::\n:::\n\n\n</blockquote></details></p>\n\n## Practice 6\n\nExplore what happens when you join two tables with duplicated/repeated keys.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- tibble(\n  key = c(1, 2, 2, 3),\n  val_x = c(\"x1\", \"x2\", \"x3\", \"x4\")\n)\ny <- tibble(\n  key = c(1, 2, 2, 3),\n  val_y = c(\"y1\", \"y2\", \"y3\", \"y4\")\n)\n```\n:::\n\n\n<p><details>\n<summary>Click here for the answer key</summary>\n<blockquote>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nleft_join(x, y, by = \"key\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in left_join(x, y, by = \"key\"): Detected an unexpected many-to-many relationship between `x` and `y`.\nℹ Row 2 of `x` matches multiple rows in `y`.\nℹ Row 2 of `y` matches multiple rows in `x`.\nℹ If a many-to-many relationship is expected, set `relationship =\n  \"many-to-many\"` to silence this warning.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 3\n    key val_x val_y\n  <dbl> <chr> <chr>\n1     1 x1    y1   \n2     2 x2    y2   \n3     2 x2    y3   \n4     2 x3    y2   \n5     2 x3    y3   \n6     3 x4    y4   \n```\n:::\n:::\n\n\nThe key gets duplicated for each pairwise combination.\n\n</blockquote></details></p>\n\n## Challenge 1\n\nReshape the `us_rent_income` tibble (included in \\{tidyverse\\}) so that each row represents a single US state (Hint: Variables should be something like: `GEOID`, `NAME`, `estimate_income`, `estimate_rent`, `moe_income`, and `moe_rent`)\n\n<p><details>\n<summary>Click here for the answer key</summary>\n<blockquote>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nus_rent_income |> \n  pivot_wider(\n    names_from = variable, \n    values_from = c(estimate, moe)\n  )\n## # A tibble: 52 × 6\n##    GEOID NAME                 estimate_income estimate_rent moe_income moe_rent\n##    <chr> <chr>                          <dbl>         <dbl>      <dbl>    <dbl>\n##  1 01    Alabama                        24476           747        136        3\n##  2 02    Alaska                         32940          1200        508       13\n##  3 04    Arizona                        27517           972        148        4\n##  4 05    Arkansas                       23789           709        165        5\n##  5 06    California                     29454          1358        109        3\n##  6 08    Colorado                       32401          1125        109        5\n##  7 09    Connecticut                    35326          1123        195        5\n##  8 10    Delaware                       31560          1076        247       10\n##  9 11    District of Columbia           43198          1424        681       17\n## 10 12    Florida                        25952          1077         70        3\n## # ℹ 42 more rows\n```\n:::\n\n\n</blockquote></details></p>\n\n## Readings\n\n- [Pivoting](https://tidyr.tidyverse.org/articles/pivot.html) from *tidy* package website\n- [Two-table verbs](https://dplyr.tidyverse.org/articles/two-table.html) from *dplyr* package website\n- [Chapter 6: Data tidying](https://r4ds.hadley.nz/data-tidy.html) from *R4DS* (2E)\n- [Section 8.4: Reading data from multiple files](https://r4ds.hadley.nz/data-import.html#sec-readr-directory) from *R4DS* (2E)\n- [Chapter 20: Joins](https://r4ds.hadley.nz/joins.html) from *R4DS* (2E)\n\n## Fun Stuff\n\n### Pivot!\n\nIf only Chandler had studied data reshaping, he would know what pivot means...\n\n\n{{< video https://youtu.be/8w3wmQAMoxQ >}}\n\n\n\n### Merge!\n\nAt least he wasn't asking to hang an \"inner join\" sign... 🤣 \n\n\n{{< video https://youtu.be/lP2pz7E7hm4 >}}\n\n\n\n::: {.text-center}\n<a href=\"day3B.html\" class=\"btn btn-primary mt-5\" role=\"button\" >Continue to Day 3B Materials&nbsp;&nbsp;&raquo;</a>\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}