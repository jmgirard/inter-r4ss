---
title: "Day 2A"
format:
  html:
    css: ../styles.css
    highlight-style: github
---

![](../img/processing_2780E3.svg){.hero}

We begin with a discussion of how to summarize data in tibbles (which is like folding down all rows into a single row) and by group in tibbles (which is like folding down to one row per group). We will also learn about combining grouping with the mutate function, how to use conditional logic (or control flow) while wrangling, how to quickly and conveniently select columns in a tibble, and how to do basic iteration within a tibble (e.g., repeating the same operation across columns).

## Slides

<iframe class="slide-deck" src="./Slides/2A_Slides.html" title="Day 2A Slideshow">
</iframe>

[Click here to view the slides in their own window.](./Slides/2A_Slides.html)

## Practice 1

Summarize the `txhousing` tibble (included in \{tidyverse\}) to recreate the following tibble (where `n_obs` is the number of observations, `n_cities` is the number of unique/distinct cities, `mdn_listings` is the median number of monthly listings, `max_listings` is the maximum number of monthly listings). Ignore/remove any missing values when calculating the last two summary variables.

```{r}
#| message: false
#| warning: false
#| echo: false

library(tidyverse)
txhousing |> 
  summarize(
    n_obs = n(),
    n_cities = n_distinct(city),
    mdn_listings = median(listings, na.rm = TRUE),
    max_listings = max(listings, na.rm = TRUE)
  )
```

<p><details>
<summary>Click here for the answer key</summary>
<blockquote>

```{r}
#| message: false
#| warning: false
#| collapse: true

library(tidyverse)
txhousing |> 
  summarize(
    n_obs = n(),
    n_cities = n_distinct(city),
    mdn_listings = median(listings, na.rm = TRUE),
    max_listings = max(listings, na.rm = TRUE)
  )
```

</blockquote></details></p>

## Practice 2

Summarize the `txhousing` tibble to recreate the following tibble (where `m_price` is the mean of the `median` variable and `s_price` is the standard deviation of the `median` variable, both per city-year combination).

```{r}
#| message: false
#| warning: false
#| echo: false

txhousing |> 
  summarize(
    m_price = mean(median),
    s_price = sd(median),
    .by = c(city, year)
  )
```


<p><details>
<summary>Click here for the answer key</summary>
<blockquote>

```{r}
#| message: false
#| warning: false
#| collapse: true

txhousing |> 
  summarize(
    m_price = mean(median),
    s_price = sd(median),
    .by = c(city, year)
  )
```

</blockquote></details></p>

## Practice 3

Use a grouped mutate to add a new variable to the `txhousing` tibble that shows the average number of sales for that city in that year. Select only the `city`, `year`, `month`, and `sales` variables, in addition to the newly created variable.

```{r}
#| message: false
#| warning: false
#| echo: false

txhousing |> 
  mutate(
    avg_sales = mean(sales),
    .by = c(city, year)
  ) |> 
  select(city, year, month, sales, avg_sales)
```

<p><details>
<summary>Click here for the answer key</summary>
<blockquote>

```{r}
#| message: false
#| warning: false
#| collapse: true

txhousing |> 
  mutate(
    avg_sales = mean(sales),
    .by = c(city, year)
  ) |> 
  select(city, year, month, sales, avg_sales)
```

</blockquote></details></p>

## Practice 4

a) Use `if_else()` to add a new variable to `mpg` called `size` that equals “LARGE” if class is “suv”, “minivan”, or “pickup” and equals “SMALL” otherwise. Then select the `model`, `class`, and `size` variables.

b) For practice, repeat the first part of this question but this time use `case_when()`. Is the Subaru Forester AWD model LARGE or SMALL?

<p><details>
<summary>Click here for the answer key</summary>
<blockquote>

**Part (a)**

```{r}
#| message: false
#| collapse: true

mpg |> 
  mutate(
    size = if_else(
      condition = class %in% c("suv", "minivan", "pickup"),
      true = "LARGE",
      false = "SMALL"
    )
  ) |> 
  select(model, class, size)
```

**Part (b)**
```{r}
#| collapse: true

mpg |> 
  mutate(
    size = case_when(
      class == "suv" ~ "LARGE",
      class == "minivan" ~ "LARGE",
      class == "pickup" ~ "LARGE",
      .default = "SMALL"
    )
  ) |> 
  select(model, class, size) |> 
  filter(model == "forester awd")
```

The Subaru Forester AWD is LARGE.

</blockquote></details></p>


## Practice 5

a.    Use tidy selection to extract all variables that have names ending with "_color" from the `starwars` tibble.

b.    Use tidy selection to extract the `name` variable and all variables from the `species` variable to the last variable in the `starwars` tibble.

<p><details>
<summary>Click here for the answer key</summary>
<blockquote>

**Answer (a)**

```{r}
#| message: false
#| collapse: true

library(tidyverse)
starwars |> 
  select(ends_with("_color"))
```

**Answer (b)**

```{r}
#| collapse: true

starwars |> 
  select(name, species:last_col())
```

</blockquote></details></p>

## Practice 6

a.    Use `across()` to apply the `str_to_upper()` function to the `manufacturer` and `model` variables of the `mpg` tibble.

b.    Use `across()` to summarize the median of every numeric variable in the `diamonds` tibble.


<p><details>
<summary>Click here for the answer key</summary>
<blockquote>

**Answer (a)**

```{r}
#| collapse: true

mpg |> 
  mutate(
    across(
      .cols = c(manufacturer, model), 
      .fns = str_to_upper
    )
  )
```

**Answer (b)**

```{r}
#| collapse: true

diamonds |> 
  summarize(
    across(
      .cols = where(is.numeric), 
      .fns = median
    )
  )
```


</blockquote></details></p>


## Challenge 1

Read the documentation for the `first()`, `last()`, and `nth()` summary functions (they all share a single documentation page). Then apply these functions to do the following: (1) calculate the average number of monthly `listings` in each city (removing any missing values), and then (2) find the cities with the highest, second-highest, second-lowest, and lowest average number of monthly listings.

<p><details>
<summary>Click here for the answer key</summary>
<blockquote>
```{r}
#| collapse: true

txhousing |> 
  summarize(
    m_listings = mean(listings, na.rm = TRUE),
    .by = city
  ) |> 
  summarize(
    most = first(city, order_by = m_listings),
    second_most = nth(city, n = 2, order_by = m_listings),
    second_least = nth(city, n = -2, order_by = m_listings),
    least = last(city, order_by = m_listings)
  )
```
</blockquote></details></p>

## Challenge 2

a.    Look at the code below and figure out how it works.

b.    Adapt this code to create four new variables called `carat_minimum`, `carat_maximum`, `price_minimum`, and `price_maximum`.

```{r}
#| collapse: true

diamonds |> 
  summarize(
    across(
      .cols = c(carat, price),
      .fns = list(m = mean, s = sd),
      .names = "{.fn}_{.col}"
    )
  )
```

<p><details>
<summary>Click here for the answer key</summary>
<blockquote>

```{r}
#| collapse: true

diamonds |> 
  summarize(
    across(
      .cols = c(carat, price),
      .fns = list(minimum = min, maximum = max),
      .names = "{.col}_{.fn}"
    )
  )
```

</blockquote></details></p>

## Readings

- [Section 4.5: Groups](https://r4ds.hadley.nz/data-transform.html#groups) from *R4DS* (2E)
- [Selection language](https://tidyselect.r-lib.org/reference/language.html) from *tidyselect* package website
- [Column-wise operation](https://dplyr.tidyverse.org/articles/colwise.html) from *dplyr* package website
- [Row-wise operation](https://dplyr.tidyverse.org/articles/rowwise.html) from *dplyr* package website

## Fun Stuff

### Awesome Origami

These are only slightly more impressive than our `penguins` summary tibbles...

{{< video https://youtu.be/wjou0v1gy94 >}}


::: {.text-center}
<a href="day2B.html" class="btn btn-primary mt-5" role="button" >Continue to Day 2B Materials&nbsp;&nbsp;&raquo;</a>
:::
