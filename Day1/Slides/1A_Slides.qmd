---
format: 
  revealjs:
    css: ../../styles.css
    slide-number: true
    show-slide-number: all
    progress: true
    history: true
    hash-type: number
    theme: default
    code-block-background: true
    highlight-style: github
    code-link: false
    code-copy: true
    controls: true
    pagetitle: "Inter R4SS Day 1A"
    author-meta: "Jeffrey Girard"
    date-meta: "2023-06-05"
---

::: {.my-title}
# [Intermediate R]{.blue2} <br />for Social Scientists

::: {.my-grey}
[Workshop Day 1A | 2023-06-05]{}<br />
[Jeffrey M. Girard | Pitt Methods]{}
:::

![](../../img/proud2_2780E3.svg){.absolute bottom=0 right=0 width=400}
:::

# Overview

## Instructor {.smaller}

::: {.columns .pv4}
::: {.column width="30%"}
::: {.tc}
![](../../img/Girard_500x500.jpg){.br-100}

**Jeffrey Girard**, PhD<br /> [affcom.ku.edu/girard](https://affcom.ku.edu/girard)<br /> [jmgirard\@ku.edu](mailto:jmgirard@ku.edu)
:::
:::

::: {.column width="10%"}
:::

::: {.column width="60%"}
::: {.fragment}
#### Background

-   [Assistant Professor]{.b .blue}, *University of Kansas*
-   Research Postdoc, *Carnegie Mellon University*
-   PhD Student, *University of Pittsburgh*
:::
::: {.fragment .mt1}
#### Research Areas

-   Psychological Assessment
-   Affective/Interpersonal Communication
-   Applied [Statistics]{.b .blue} and Machine Learning
-   [Data Science]{.b .blue} and Software Engineering
:::
:::
:::

## Workshop Goals {.smaller}

::: {.columns .pv4}
::: {.column width="60%"}
-   This is an intermediate workshop aimed at social scientists with some prior experience in R

::: {.fragment .mt1}
-   My goal this week is to teach you practical research skills in R (wrangle, visualize, model)
:::

::: {.fragment .mt1}
-   Through [lectures]{.b .blue} and [live coding]{.b .blue}, you will learn fundamental concepts and skills
:::

::: {.fragment .mt1}
-   Through hands-on [exercises]{.b .blue}, you will gain confidence in your skills and ability to learn
:::

::: {.fragment .mt1}
-   You will need to practice to become a pro!
:::
:::

::: {.column .tc .pv5 width="40%"}
{{< li rfldwidq trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}
:::
:::


## Workshop Roadmap {.smaller}

::: {.columns .pv4}
::: {.column width="60%"}
<table id="roadmap" width="100%">
  <tr class="blue">
    <th>DAY 1A</th>
    <th>DAY 2A</th>
    <th>DAY 3A</th>
  </tr>
  <tr>
    <td>Overview</td>
    <td>Summarize</td>
    <td>Separating</td>
  </tr>
  <tr>
    <td>Quarto</td>
    <td>Selection</td>
    <td>Reshaping</td>
  </tr>
  <tr>
    <td>Wrangling</td>
    <td>Iteration</td>
    <td>Joining</td>
  </tr>
  <tr class="blue">
    <th style="padding-top:1.75rem;">DAY 1B</th>
    <th>DAY 2B</th>
    <th>DAY 3A</th>
  </tr>
  <tr>
    <td>Graphics</td>
    <td>Customizing</td>
    <td>Stats: GLM</td>
  </tr>
  <tr>
    <td>Variation</td>
    <td>Layouts</td>
    <td>Stats: MLM</td>
  </tr>
  <tr>
    <td>Covariation</td>
    <td>Exporting</td>
    <td>Consulting</td>
  </tr>
</table>
:::

::: {.column .tc .pv4 width="40%"}
{{< li xtkehzkm trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}
:::
:::

## Workshop Etiquette {.smaller}

::: {.columns .pv4}
::: {.column width="60%"}
#### [Things to Do]{.green}

-   Behave respectfully and with patience
-   Ask for help in chat or "raise hand"
-   Turn your camera on or off as desired
-   Come and go from workshop as needed

::: {.fragment .mt1}
#### [Things Not to Do]{.red}

-   Don't disparage yourself or others
-   Don't stay confused for too long
-   Don't unmute yourself when not talking
-   Don't re-sell the workshop materials
:::
:::

::: {.column .tc .pv5 width="40%"}
{{< li syzdvjlt trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}
:::
:::


# Refresher

## R, RStudio, and Projects

![](../../img/rstudio_labels.jpg)

Keep all your files together in a project (Files > New Project)

## Communicating with R {.smaller}

::: {.columns .pv4}
::: {.column width="60%"}
-   The [Console]{.b .blue} is like a [chat window]{.b .green} with R
    -   You send a command to R and get a response
    -   Neither side of the conversation is saved

::: {.fragment .mt1}
-   An [R Script]{.b .blue} is like an [email thread]{.b .green} with R
    -   You send many commands to R all at once
    -   Only your side of the conversation is saved
:::

::: {.fragment .mt1}
-   A [Quarto Document]{.b .blue} is like a [scrapbook]{.b .green} with R
    -   You can combine code and formatted text
    -   Both sides of the conversation are saved
:::
:::

::: {.column .tc .pv5 width="40%"}
{{< li zpxybbhl trigger=loop delay=5000 colors=secondary:#2a76dd class=rc >}}
:::
:::

## Assignment and Naming

- Create named objects in R using `<-`

```{r}
#| echo: true
#| collapse: true
#| code-line-numbers: false

x <- 10
x - 2 * 3 / 4 ^ 5
```

::: {.fragment .mt2}
- Object names have some rules in R
    -   Can only contain letters, digits, `_`s, and `.`s
    -   The first character must be a letter or a `.`
:::

## Functions and Packages

- Use functions to perform operations

```{r}
#| echo: true
#| collapse: true
#| code-line-numbers: false

y <- round(2/3, digits = 3)
y
```

::: {.fragment .mt2}
- Install and load packages to add features

```{r}
#| echo: true
#| collapse: true
#| code-line-numbers: false

# install.packages("praise")
library(praise)
praise()
```
:::

## Strings and Vectors

- Store text data in strings by wrapping it in quotation marks

```{r}
#| echo: true
#| collapse: true
#| code-line-numbers: false

address <- "1600 Pennsylvania Avenue NW, Suite #100"
address
```

::: {.fragment .mt1}
- Collect multiple similar objects into a vector with `c()`

```{r}
#| echo: true
#| collapse: true
#| code-line-numbers: false

temps <- c(70.1, 84.5, 79.0, 69.7, 85.7)
temps
```

::: {.fragment .mt2}
```{r}
#| echo: true
#| collapse: true
#| code-line-numbers: false

nations <- c("US", "UK", "FR", "CH", "DE")
nations
```
:::
:::

## Factors

- Store categorical data in factors using `factor()`

```{r}
#| echo: true
#| collapse: true
#| code-line-numbers: false

condition_codes <- c(1, 1, 2, 2, 3, 3)
condition_codes
```

::: {.fragment .mt2}
```{r}
#| echo: true
#| collapse: true
#| code-line-numbers: false

condition <- factor(
  condition_codes,
  levels = c(1, 2, 3),
  labels = c("Waitlist", "Placebo", "Drug")
)
condition
```
:::

## Tibbles

- Tibbles/data frames store tidy, rectangular data in R

```{r}
#| echo: true
#| collapse: true
#| message: false
#| code-line-numbers: false

library(palmerpenguins)
penguins
```

## Data Files

- We can also import a data file (e.g., CSV) into R as a tibble

```{r}
#| echo: true
#| collapse: true
#| message: false
#| code-line-numbers: false

library(tidyverse)
cereal <- read_csv("cereal.csv")
cereal
```

# Quarto

## Quarto

::: {.columns .pv4}
::: {.column width="60%"}
-   [Quarto](https://www.quarto.org) creates dynamic content that combines code, output, and markdown (i.e., formatted text)

::: {.fragment}
-   Create articles, reports, posters, slideshows, websites, blogs, and books in many different formats
:::

::: {.fragment}
-   Include equations, citations, crossrefs, figure panels, callouts, advanced layouts, and more!
:::
:::

::: {.column .tc .pv5 width="40%"}
{{< li cykiczdp trigger=loop delay=5000 colors=secondary:#2a76dd class=rc >}}
:::
:::


## Quarto Live Coding

::: {.instructions}
    # Create an Quarto Document
    - Open the "File" menu in RStudio
    - Select the "New File" option
    - Select the "Quarto Document..." option
    - Keep the defaults (HTML) and hit "Create"
    - Open the "File" menu
    - Select the "Save" option
    - Note that it defaults to the project folder
    - Give it a name like "Day 1 Notes" (or whatever)
    - Note that the file extension is .qmd

    # Render the boilerplate content
    - To see how it works, read the boilerplate content
    - Now click the "Render" button to create the output file
    - A preview of the output will appear in the Viewer tab
    - In the File tab, we see a new .html file was created
    - We can share this .html file with others
    - It includes all the formatted text, code, and R results

    # Remove the boilerplate content
    - The top part of the document is called the "Header"
    - You can change the title but keep it in quotes
    - Highlight and delete everything below the header
    - You can delete the header too, but I find it useful
    
    # Add an R Chunk
    - Option 1: Click the green box with C and a plus sign icon (top-right)
    - Option 2: Ctrl+Alt+I (Win) or Cmd+Option+I (Mac)
    - Option 3: Type out ```{r} then new line and ``` yourself
    
    # Adding code to the chunk
    - Anything you put inside the "fences" (i.e., ```) will be treated as R code
    - The chunk operates like a mini console
    - Try doing some calculations in the chunk and hit the green arrow
    - The answer appears right below the chunk!
    - If we save and render the document, it appears in the output too
:::

## Markdown

::: {.columns .pv4}
::: {.column width="60%"}
-   [Markdown](https://quarto.org/docs/authoring/markdown-basics.html) is a simple text-to-HTML conversion language used by Quarto, GitHub, Obsidian, etc.

::: {.fragment}
-   It will allow us to add formatted text, images, links, lists, etc. to our Quarto documents
:::

::: {.fragment}
-   Quarto will treat all text that is not in a code chunk as markdown
:::

:::

::: {.column .tc .pv5 width="40%"}
{{< li zcuiyuld trigger=loop delay=5000 colors=secondary:#2a76dd class=rc >}}
:::
:::

## Markdown Live Coding

::: {.instructions}
    # Formatting
    - *italics* and **bold** and ***italics and bold***
    - superscript^2^ and subscript~2~
    - ~~strikethrough~~
    - `verbatim code`
    
    # Headings
    - # Header 1
    - ## Header 2
    - ### Header 3
    
    # Links
    - <https://quarto.org>
    - [Quarto](https://quarto.org)
    
    # Images
    - ![Caption](https://quarto.org/docs/authoring/elephant.png)
    
    # Lists
    - * Unordered list
    -   + sub-item
    -   + sub-item
    - 1. Ordered list
    - 2. Item 2
:::

# Basic Data Wrangling

## Basic data wrangling verbs {.smaller}

::: {.columns .pv4}
::: {.column width="60%"}
-   [tidyverse]{.b .blue} provides tools for wrangling tibbles
    -   These functions are named after *verbs*
    -   So if you name your objects after *nouns*...
    -   ...your code becomes easier to read

::: {.fragment .mt1}
| Noun(noun) ❌        |  Verb(noun)  ✔️  | 
|:----------------------|:----------------|
| `blender(fruit)`      | `blend(fruit)`  |
| `screwdriver(screw)`  | `drive(screw)`  |
| `boxcutter(box)`      | `cut(box)`      |

:::
:::

::: {.column .tc .pv5 width="40%"}
{{< li sbiheqdr trigger=loop delay=5000 colors=secondary:#2a76dd class=rc >}}
:::
:::

## Wrangling columns

::: {.columns .pv4}
::: {.column width="60%"}
-   [Select]{.b .blue} retains only certain columns in a tibble (and can reorder them)
    - [`select(X, KEEP, -DROP)`]{.f80}

::: {.fragment .mt1}
-   [Mutate]{.b .blue} transforms columns in a tibble or adds new columns to it
    - [`mutate(X, NEW = OLD / 5)`]{.f80}
:::
:::

::: {.column .tc .pv5 width="40%"}
{{< li ifxlrnhk trigger=loop delay=5000 colors=secondary:#2a76dd class=rc >}}
:::
:::


## *Select* Live Coding

```{r}
#| echo: true
#| eval: false
#| error: true
#| code-line-numbers: false

# SETUP: Load package and inspect example tibble

library(tidyverse) # includes the dplyr package
starwars

# ==============================================================================

# USECASE: Retain only the specified variables

sw <- select(starwars, name)
sw
sw <- select(starwars, name, sex, species)
sw

# ==============================================================================

# PITFALL: Don't forget to save the change with assignment

select(starwars, name, sex, species)
starwars # still includes all variables

# ==============================================================================

# USECASE: Retain all variables between two variables

sw <- select(starwars, name, hair_color:eye_color)
sw

# ==============================================================================

# USECASE: Retain all variables except the specified ones

sw <- select(starwars, -sex, -species)
sw
sw <- select(starwars, -c(sex, species))
sw
sw <- select(starwars, -c(hair_color:starships))
sw
```


## *Mutate* Live Coding

```{r}
#| echo: true
#| eval: false
#| error: true
#| code-line-numbers: false

# SETUP: Create example tibble

patients <- tibble(
  id = c("S1", "S2", "S3"),
  feet = c(6, 5, 5),
  inches = c(1, 7, 2),
  pounds = c(176.3, 124.9, 162.6)
)
patients

# ==============================================================================

# USECASE: Add one or more variables

p2 <- mutate(patients, sex = c("M", "F", "F"))
p2

ages <- c(32, 41, 29)
p2 <- mutate(patients, ages = ages)
p2

p2 <- mutate(
  patients, 
  sex = c("M", "F", "F"), 
  ages = ages
)
p2

# ==============================================================================

# USECASE: Compute variables

p2 <- mutate(patients, height = feet + inches / 12)
p2

p2 <- mutate(patients, ln_pounds = log(pounds))
p2

# ==============================================================================

# USECASE: Overwrite variables

patients <- mutate(patients, height = height / 3.281)
patients

# ==============================================================================

# USECASE: Duplicate variables

p2 <- mutate(patients, weight = pounds)
p2 # both weight and pounds exist
```


## Wrangling rows

::: {.columns .pv4}
::: {.column width="60%"}
-   [Arrange]{.b .blue} sorts the rows in a tibble based on their values
    -   [`arrange(X, VAR_SORT_UP)`]{.f80}

::: {.fragment .mt1}
-   [Filter]{.b .blue} retains only certain rows in a tibble based on criteria
    -   [`filter(X, NUMBER > 0)`]{.f80}
    -   [`filter(X, STRING == "A")`]{.f80}
:::

:::

::: {.column .tc .pv5 width="40%"}
{{< li dlprbpnx trigger=loop delay=5000 colors=secondary:#2a76dd class=rc >}}
:::
:::


## *Arrange* Live Coding

```{r}
#| echo: true
#| eval: false
#| error: true
#| code-line-numbers: false

# USECASE: Sort observations by a variable

starwars

sw <- arrange(starwars, height)
sw # sorted by height, ascending

sw <- arrange(starwars, name)
sw # sorted by name, alphabetically

# ==============================================================================

# USECASE: Sort observations by a variable, in reverse order

sw <- arrange(starwars, desc(height))
sw # sorted by height, descending

sw <- arrange(starwars, desc(name))
sw # sorted by name, reverse-alphabetically

# ==============================================================================

# USECASE: Sort observations by multiple variables

sw <- arrange(starwars, hair_color, mass)
sw # sorted by hair_color, then ties broken by mass
```


## *Filter* Live Coding

```{r}
#| echo: true
#| eval: false
#| error: true
#| code-line-numbers: false

# USECASE: Retain only observations that meet a criterion

sw <- filter(starwars, mass > 100)
sw # only observations with mass greater than 100

sw <- filter(starwars, mass <= 100)
sw # only observations with mass less than or equal to 100

sw <- filter(starwars, species == "Human")
sw # only observations with species equal to Human

sw <- filter(starwars, species != "Human")
sw # only observations with species not equal to Human

# ==============================================================================

# PITFALL: Don't try to use a single = for testing equality

sw <- filter(starwars, height = 150) # error

sw <- filter(starwars, height == 150) # correct
sw 

# ==============================================================================

# PITFALL: Don't forget that R is case-sensitive

sw <- filter(starwars, species == "human")
sw # no observations left (because it should be Human)

# ==============================================================================

# USECASE: Retain only observations that meet complex criteria

sw <- filter(starwars, mass > 100 & height > 200)
sw # only observations with mass over 100 AND height over 200

sw <- filter(starwars, height < 100 | hair_color == "none")
sw # only observations with height under 100 OR hair_color equal to none

# ==============================================================================

# PITFALL: Don't forget to complete both conditions

sw <- filter(starwars, mass > 100 & < 200) # error

sw <- filter(starwars, mass > 100 & mass < 200) # correct
sw

# ==============================================================================

# PITFALL: Don't try to equate a string to a vector

sw <- filter(starwars, species == c("Human", "Droid")) # error

sw <- filter(starwars, species %in% c("Human", "Droid")) # correct
sw
```


## *Filter* Cheatsheet {.smaller}

::: {.columns .pv4}
::: {.column width="60%" .mytable}

| Symbol | Description            | Num | Chr   |
|--------|------------------------|-----|-------|
| `<`    | Less than              | Yes | *No*  |
| `<=`   | Less than or equal to  | Yes | *No*  |
| `>`    | More than              | Yes | *No*  |
| `>=`   | More than or equal to  | Yes | *No*  |
| `==`   | Equal to               | Yes | Yes   |
| `!=`   | Not equal to           | Yes | Yes   |
| `%in%` | Found in               | Yes | Yes   |
| `&`    | Logical And            | Yes | Yes   |
| `|`    | Logical Or             | Yes | Yes   |

:::

::: {.column .tc .pv5 width="40%"}
{{< li esixrdij trigger=loop delay=5000 colors=secondary:#2a76dd class=rc >}}
:::
:::

# Pipes and Pipelines

## Pipes and Pipelines {.smaller}

::: {.columns .pv4}
::: {.column width="60%"}
- How can we do [multiple operations]{.b .green} to an object?
    1. `x <- 10`
    2. `x2 <- sqrt(x)`
    3. `x3 <- round(x2)`
    
::: {.fragment .mt1}
- This works but is **cumbersome** and **error-prone**
:::

::: {.fragment .mt1}
- A better approach is to use [pipes]{.b .blue} and [pipelines]{.b .green}
    - `x3 <- 10 |> sqrt() |> round()`
:::

::: {.fragment .mt1}
- I like to read `|>` as "and then..."
    - "Take 10 and then sqrt() and then round()"
:::
    
:::

::: {.column .tc .pv5 width="40%"}
{{< li mhttdvjl trigger=loop delay=5000 colors=secondary:#2a76dd class=rc >}}
:::
:::


## Pipes Live Coding

```{r}
#| echo: true
#| eval: false
#| error: true
#| code-line-numbers: false

# SETUP: Enable the pipe operator shortcut

# Tools > Global Options... > Code tab > Check "Use Native Pipe Operator"

# Type out |> or press Ctrl+Shift+M (Win) / Cmd+Shift+M (Mac)

# ==============================================================================

# LESSON: The pipe pushes objects to a function as its first argument

# TEMPLATE: x |> function_name() is the same as function_name(x)

x <- 10

y <- sqrt(x)
y

y <- x |> sqrt()
y

# ==============================================================================

# PITFALL: Don't forget to remove the object from the function call

x |> sqrt(x) # wrong

x |> sqrt() # correct

# ==============================================================================

# USECASE: You can still use arguments when piping

z <- round(3.14, digits = 1)
z

z <- 3.14 |> round(digits = 1)
z

# ==============================================================================

# USECASE: Pipes are useful with tibbles and wrangling verbs

starwars

sw <- select(starwars, name, species, height)
sw

sw <- starwars |> select(name, species, height)
sw

# ==============================================================================

# PITFALL: Don't add a pipe without a step after it

sw <- starwars |> select(name, species, height) |> # error
```


## Pipelines Live Coding

```{r}
#| echo: true
#| eval: false
#| error: true
#| code-line-numbers: false

# USECASE: You can chain multiple pipes together to make a pipeline

x <- 10 |> sqrt() |> round()
x

# ==============================================================================

# TIP: If you want to see the output of a pipeline, you can pipe to print()

x <- 10 |> sqrt() |> round() |> print()

# ==============================================================================

# TIP: To make your pipelines more readable, move each step to a new line

x <- 
  10 |> 
  sqrt() |> 
  round() |>
  print()

# ==============================================================================

# PITFALL: Don't put the pipe at the beginning of a line, though

x <- 
  10 
  |> sqrt()
  |> round()
  |> print() # error

# ==============================================================================

# USECASE: Chain together a series of verbs to flexibly wrangle data

tallones <- 
  starwars |> 
  select(name, species, height) |> 
  mutate(height_ft = height / 30.48) |>  
  filter(height_ft > 7) |> 
  arrange(desc(height_ft)) |>  
  print()
```
